id: ee884976-418c-472d-8a91-3533f4aa15d0
Function:
  Title: Backward Compatibility Parser for Okta SSO
  Version: '1.0.0'
  LastUpdated: '2023-09-07'
Category: Microsoft Sentinel Parser
FunctionName: OktaSSO
FunctionAlias: OktaSSO
FunctionQuery: |
    let Okta_SSO = view () {
    let Oktav1_empty = datatable(
      actor_alternateId_s:string,
      actor_detailEntry_s:string,
      actor_displayName_s:string,
      actor_id_s:string,
      actor_type_s:string,
      authenticationContext_authenticationProvider_s:string,
      authenticationContext_authenticationStep_d:double,
      authenticationContext_credentialProvider_s:string,
      authenticationContext_credentialType_s:string,
      authenticationContext_externalSessionId_s:string,
      authenticationContext_interface_s:string,
      authenticationContext_issuerId_s:string,
      authenticationContext_issuerType_s:string,
      client_device_s:string,
      client_geographicalContext_city_s:string,
      client_geographicalContext_country_s:string,
      client_geographicalContext_geolocation_lat_d:double,
      client_geographicalContext_geolocation_lon_d:double,
      client_geographicalContext_postalCode_s:string,
      client_geographicalContext_state_s:string,
      client_id_s:string,
      client_ipAddress_s:string,
      client_userAgent_browser_s:string,
      client_userAgent_os_s:string,
      client_userAgent_rawUserAgent_s:string,
      client_zone_s:string,
      debugContext_debugData_s:string,
      displayMessage_s:string,
      eventType_s:string,
      legacyEventType_s:string,
      uuid_g:string,
      outcome_reason_s:string,
      outcome_result_s:string,
      request_ipChain_s:string,
      securityContext_asNumber_d:double,
      securityContext_asOrg_s:string,
      securityContext_domain_s:string,
      securityContext_isp_s:string,
      securityContext_isProxy_b:bool,
      severity_s:string,
      target_s:string,
      transaction_details_s:string,
      transaction_id_s:string,
      transaction_type_s:string,
      version_s:string
    )[];
    let Oktav2 = union isfuzzy=true Oktav1_empty, OktaV2_CL |
        project columnifexists('TimeGenerated', ""),
        actor_alternateId_s=columnifexists('OriginalActorAlternateId', ""),
        actor_detailEntry_s=tostring(columnifexists('ActorDetailEntry', "")),
        actor_displayName_s=columnifexists('ActorDisplayName', ""),
        actor_id_s=columnifexists('OriginalUserId', ""),
        actor_type_s=columnifexists('OriginalUserType', ""),
        authenticationContext_authenticationProvider_s=columnifexists('AuthenticationContextAuthenticationProvider', ""),
        authenticationContext_authenticationStep_d=toreal(columnifexists('AuthenticationContextAuthenticationStep', "")),
        authenticationContext_credentialProvider_s=columnifexists('AuthenticationContextCredentialProvider', ""),
        authenticationContext_credentialType_s=columnifexists('LogonMethod', ""),
        authenticationContext_externalSessionId_s=columnifexists('ActorSessionId', ""),
        authenticationContext_interface_s=columnifexists('AuthenticationContextInterface', ""),
        authenticationContext_issuerId_s=columnifexists('AuthenticationContextIssuerId', ""),
        authenticationContext_issuerType_s=columnifexists('AuthenticationContextIssuerType', ""),
        client_device_s=columnifexists('OriginalClientDevice', ""),
        client_geographicalContext_city_s=columnifexists('SrcGeoCity', ""),
        client_geographicalContext_country_s=columnifexists('SrcGeoCountry', ""),
        client_geographicalContext_geolocation_lat_d=columnifexists('SrcGeoLatitude', ""),
        client_geographicalContext_geolocation_lon_d=columnifexists('SrcGeoLongtitude', ""),
        client_geographicalContext_postalCode_s=columnifexists('SrcGeoPostalCode', ""),
        client_geographicalContext_state_s=columnifexists('SrcGeoRegion', ""),
        client_id_s=columnifexists('SrcDvcId', ""),
        client_ipAddress_s=columnifexists('SrcIpAddr', ""),
        client_userAgent_browser_s=columnifexists('ActingAppName', ""),
        client_userAgent_os_s=columnifexists('SrcDvcOs', ""),
        client_userAgent_rawUserAgent_s=columnifexists('HttpUserAgent', ""),
        client_zone_s=columnifexists('SrcZone', ""),
        debugContext_debugData_s=tostring(columnifexists('DebugData', "")),
        displayMessage_s=columnifexists('EventMessage', ""),
        eventType_s=columnifexists('EventOriginalType', ""),
        legacyEventType_s=columnifexists('LegacyEventType', ""),
        uuid_g=columnifexists('EventOriginalUid', ""),
        outcome_reason_s=columnifexists('EventOriginalResultDetails', ""),
        outcome_result_s=columnifexists('OriginalOutcomeResult', ""),
        request_ipChain_s=tostring(columnifexists('Request', "")),
        securityContext_asNumber_d=toreal(columnifexists('SecurityContextAsNumber', "")),
        securityContext_asOrg_s=columnifexists('SecurityContextAsOrg', ""),
        securityContext_domain_s=columnifexists('SecurityContextDomain', ""),
        securityContext_isp_s=columnifexists('SrcIsp', ""),
        securityContext_isProxy_b=columnifexists('SecurityContextIsProxy', ""),
        severity_s=columnifexists('OriginalSeverity', ""),
        target_s=tostring(columnifexists('OriginalTarget', "")),
        transaction_details_s=tostring(columnifexists('TransactionDetail', "")),
        transaction_id_s=columnifexists('TransactionId', ""),
        transaction_type_s=columnifexists('TransactionType', ""),
        version_s = columnifexists('Version', "");
        union isfuzzy=true Oktav1_empty, Oktav2, Okta_CL
    };
    Okta_SSO()
