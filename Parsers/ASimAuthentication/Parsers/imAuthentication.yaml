Parser:
  Title: Authentication ASIM filtering parser
  Version: '0.2.2'
  LastUpdated: Sept 18, 2023
Product:
  Name: Source agnostic
Normalization:
  Schema: Authentication
  Version: '0.1.0'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing Authentication logs from all supported sources to the ASIM Authentication normalized schema.
ParserName: imAuthentication
EquivalentBuiltInParser: _Im_Authentication
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: targetusername_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetappname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: actorusername_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: srchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dvcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dvchostname_has_any
    Type: dynamic
    Default: dynamic([])
ParserQuery: |
  let Generic=(starttime: datetime=datetime(null), endtime: datetime=datetime(null), eventtype_in: dynamic=dynamic([]), eventresultdetails_in: dynamic=dynamic([]), eventresult: string='*', targetusername_has_any: dynamic=dynamic([]), targetappname_has_any: dynamic=dynamic([]), actorusername_has_any: dynamic=dynamic([]), srcipaddr_has_any_prefix: dynamic=dynamic([]), srchostname_has_any: dynamic=dynamic([]), targetipaddr_has_any_prefix: dynamic=dynamic([]), dvcipaddr_has_any_prefix: dynamic=dynamic([]), dvchostname_has_any: dynamic=dynamic([])) {
    let DisabledParsers=materialize(_GetWatchlist('ASimDisabledParsers') | where SearchKey in ('Any', 'ExcludeimAuthentication') | extend SourceSpecificParser=column_ifexists('SourceSpecificParser','') | distinct SourceSpecificParser);
    let imAuthenticationDisabled=toscalar('ExcludeimAuthentication' in (DisabledParsers) or 'Any' in (DisabledParsers)); 
    union isfuzzy=true
      vimAuthenticationEmpty
      , vimAuthenticationAADManagedIdentitySignInLogs   (starttime=starttime, endtime=endtime, targetusername_has=targetusername_has_any, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationAADManagedIdentitySignInLogs'      in (DisabledParsers) )))
      , vimAuthenticationAADNonInteractiveUserSignInLogs(starttime=starttime, endtime=endtime, targetusername_has=targetusername_has_any, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationAADNonInteractiveUserSignInLogs'   in (DisabledParsers) )))
      , vimAuthenticationAADServicePrincipalSignInLogs  (starttime=starttime, endtime=endtime, targetusername_has=targetusername_has_any, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationAADServicePrincipalSignInLogs'     in (DisabledParsers) )))
      , vimAuthenticationSigninLogs                     (starttime=starttime, endtime=endtime, targetusername_has=targetusername_has_any, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationSigninLogs'                        in (DisabledParsers) )))
      , vimAuthenticationAWSCloudTrail                  (starttime=starttime, endtime=endtime, targetusername_has=targetusername_has_any, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationAWSCloudTrail'                     in (DisabledParsers) )))
      , vimAuthenticationOktaSSO                        (starttime=starttime, endtime=endtime, targetusername_has=targetusername_has_any, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationOktaSSO'                           in (DisabledParsers) )))
      , vimAuthenticationM365Defender                   (starttime=starttime, endtime=endtime, targetusername_has=targetusername_has_any, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationM365Defender'                      in (DisabledParsers) )))
      , vimAuthenticationMicrosoftWindowsEvent          (starttime=starttime, endtime=endtime, targetusername_has=targetusername_has_any, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationMicrosoftWindowsEvent'             in (DisabledParsers) )))
      , vimAuthenticationMD4IoT                         (starttime=starttime, endtime=endtime, targetusername_has=targetusername_has_any, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationMD4IoT'                            in (DisabledParsers) )))
      , vimAuthenticationPostgreSQL                     (starttime=starttime, endtime=endtime, targetusername_has=targetusername_has_any, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationPostgreSQL'                    in (DisabledParsers) )))
      , vimAuthenticationSshd                           (starttime=starttime, endtime=endtime, targetusername_has=targetusername_has_any, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationSshd' in (DisabledParsers) )))
      , vimAuthenticationSu                             (starttime=starttime, endtime=endtime, targetusername_has=targetusername_has_any, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationSu' in (DisabledParsers) )))
      , vimAuthenticationCiscoASA                       (starttime=starttime, endtime=endtime, targetusername_has=targetusername_has_any, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationCiscoASA' in (DisabledParsers) )))
      , vimAuthenticationCiscoMeraki                    (starttime=starttime, endtime=endtime, targetusername_has=targetusername_has_any, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationCiscoMeraki' in (DisabledParsers) )))
      , vimAuthenticationCiscoISE                       (starttime=starttime, endtime=endtime, targetusername_has=targetusername_has_any, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationCiscoISE' in (DisabledParsers) )))
      , vimAuthenticationBarracudaWAF                   (starttime=starttime, endtime=endtime, targetusername_has=targetusername_has_any, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationBarracudaWAF' in (DisabledParsers) )))
      , vimAuthenticationVectraXDRAudit               (starttime=starttime, endtime=endtime, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationVectraXDRAudit' in (DisabledParsers) )))
      , vimAuthenticationSentinelOne                    (starttime=starttime, endtime=endtime, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationSentinelOne' in (DisabledParsers) )))
      , vimAuthenticationVMwareCarbonBlackCloud         (starttime=starttime, endtime=endtime, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, targetusername_has_any=targetusername_has_any, targetappname_has_any=targetappname_has_any, actorusername_has_any=actorusername_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, targetipaddr_has_any_prefix=targetipaddr_has_any_prefix, dvcipaddr_has_any_prefix=dvcipaddr_has_any_prefix, dvchostname_has_any=dvchostname_has_any, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationVMwareCarbonBlackCloud' in (DisabledParsers) )))
      , vimAuthenticationCrowdStrikeFalconHost          (starttime=starttime, endtime=endtime, targetusername_has_any=targetusername_has, disabled=(imAuthenticationDisabled or('ExcludevimAuthenticationCrowdStrikeFalcon' in (DisabledParsers) )))
  };
  Generic(starttime=starttime, endtime=endtime, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, targetusername_has_any=targetusername_has_any, targetappname_has_any=targetappname_has_any, actorusername_has_any=actorusername_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, targetipaddr_has_any_prefix=targetipaddr_has_any_prefix, dvcipaddr_has_any_prefix=dvcipaddr_has_any_prefix, dvchostname_has_any=dvchostname_has_any)

Parsers:
  - _Im_Authentication_Empty
  - _Im_Authentication_AADManagedIdentitySignInLogs  
  - _Im_Authentication_AADNonInteractiveUserSignInLogs
  - _Im_Authentication_AADServicePrincipalSignInLogs 
  - _Im_Authentication_SigninLogs                    
  - _Im_Authentication_AWSCloudTrail                 
  - _Im_Authentication_OktaSSO         
  - _Im_Authentication_M365Defender                  
  - _Im_Authentication_MicrosoftWindowsEvent         
  - _Im_Authentication_MD4IoT
  - _Im_Authentication_PostgreSQL
  - _Im_Authentication_Sshd
  - _Im_Authentication_Su
  - _Im_Authentication_CiscoASA
  - _Im_Authentication_CiscoMeraki
  - _Im_Authentication_CiscoISE
  - _Im_Authentication_BarracudaWAF
  - _Im_Authentication_VectraXDRAudit
  - _Im_Authentication_SentinelOne
  - _Im_Authentication_VMwareCarbonBlackCloud
  - _Im_Authentication_CrowdStrikeFalconHost

