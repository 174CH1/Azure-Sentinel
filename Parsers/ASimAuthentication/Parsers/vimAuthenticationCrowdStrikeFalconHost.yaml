Parser:
  Title: ASIM Authentication parser for CrowdStrikeFalconHost
  Version: '0.1.0'
  LastUpdated: Sep 13 2023
Product:
  Name: CrowdStrike Falcon Endpoint Protection
Normalization:
  Schema: Authentication
  Version: '0.1.3'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
- Title: CrowdStrike Falcon Endpoint Protection Documentation
  Link: 
    https://falcon.us-2.crowdstrike.com/documentation/page/d88d9ed6/streaming-api-event-dictionary
    https://falcon.us-2.crowdstrike.com/documentation/page/eb1587d1/siem-connector#mc98af8f
Description: |
  This ASIM parser supports normalizing CrowdStrike Falcon Endpoint Protection logs to the ASIM Authentication normalized schema. These events are captured through CrowdStrike Falcon Endpoint Protection data connector which allows you to easily connect your CrowdStrike Falcon Event Stream with Microsoft Sentinel.
ParserName: vimAuthenticationCrowdStrikeFalconHost
EquivalentBuiltInParser: _Im_Authentication_CrowdStrikeFalconHost
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: targetusername_has
    Type: string
    Default: '*'
ParserQuery: |
  let EventSeverityLookup = datatable (LogSeverity: string, EventSeverity: string)
  [
      "0", "Informational",
      "1", "Informational",
      "2", "Low",
      "3", "Medium",
      "4", "High",
      "5", "High"
  ];
  let parser = (disabled: bool = false, starttime: datetime=datetime(null), endtime: datetime=datetime(null), targetusername_has: string='*') {
      CommonSecurityLog
      | where not(disabled)
          and (isnull(starttime) or TimeGenerated >= starttime)
          and (isnull(endtime) or TimeGenerated <= endtime)
          and (DeviceVendor == "CrowdStrike" and DeviceProduct == "FalconHost")
          and (DeviceEventCategory == "AuthActivityAuditEvent" and DeviceEventClassID in ("userAuthenticate", "twoFactorAuthenticate"))
          and (targetusername_has == "*" or DestinationUserName has targetusername_has)
      | lookup EventSeverityLookup on LogSeverity
      | extend
          EventResult = iff(EventOutcome == "true", "Success", "Failure"),
          EventStartTime = todatetime(DeviceCustomDate1),
          ThreatField = "SrcIpAddr",
          ThreatOriginalConfidence= ThreatConfidence,
          ThreatConfidence = toint(ThreatConfidence),
          ThreatOriginalRiskLevel = tostring(ThreatSeverity)
      | extend
          EventCount = int(1),
          EventSchema = "Authentication",
          EventSchemaVersion = "0.1.3",
          EventType = "Logon"
      | project-rename 
          EventProduct = DeviceProduct,
          EventVendor = DeviceVendor,
          SrcIpAddr = DestinationTranslatedAddress,
          EventUid = _ItemId,
          EventOriginalSeverity = LogSeverity,
          EventOriginalSubType = DeviceEventClassID,
          EventOriginalType = DeviceEventCategory,
          EventProductVersion = DeviceVersion,
          EventOriginalResultDetails = EventOutcome,
          TargetUsername = DestinationUserName,
          ThreatCategory = IndicatorThreatType,
          ThreatIpAddr = MaliciousIP
      | extend
          EventEndTime = EventStartTime,
          DvcIpAddr = SrcIpAddr,
          TargetUsernameType = _ASIM_GetUsernameType(TargetUsername),
          TargetUserType = _ASIM_GetUserType(TargetUsername, "")
      | extend
          IpAddr = SrcIpAddr,
          User = TargetUsername,
          Src = SrcIpAddr,
          Dvc = coalesce(DvcIpAddr, EventProduct)
      | project-away 
          Source*,
          Destination*,
          Device*,
          AdditionalExtensions,
          CommunicationDirection,
          Computer,
          EndTime,
          FieldDevice*,
          Flex*,
          File*,
          Old*,
          MaliciousIP*,
          OriginalLogSeverity,
          Process*,
          Protocol,
          Activity,
          ReceivedBytes,
          SentBytes,
          Remote*,
          Request*,
          SimplifiedDeviceAction,
          StartTime,
          TenantId,
          ThreatDescription,
          ExternalID,
          ReportReferenceLink,
          ReceiptTime,
          Reason,
          ApplicationProtocol,
          _ResourceId,
          ExtID,
          ThreatSeverity,
          Message
  };
  parser(disabled=disabled, starttime=starttime, endtime=endtime, targetusername_has=targetusername_has)
