Parser:
  Title: Registry Event ASIM Parser for VMware Carbon Black Cloud
  Version: '0.1.1'
  LastUpdated: Aug 08, 2023
Product:
  Name: VMware Carbon Black Cloud
Normalization:
  Schema: RegistryEvent
  Version: '0.1.2'
References:
- Title: ASIM Registry Schema
  Link: https://aka.ms/ASimRegistryEventDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
- Title: VMware Carbon Black Cloud documentation 
  Link: https://developer.carbonblack.com/reference/carbon-black-cloud/
        https://developer.carbonblack.com/reference/cb-threathunter/latest/event-search-fields/
Description: |
  This ASIM parser supports normalizing VMware Carbon Black Cloud logs to the ASIM Registry Event normalized schema. VMware Carbon Black Cloud events are captured through VMware Carbon Black Cloud data connector which ingests Carbon Black Audit, Notification and Event data into Microsoft Sentinel through the REST API.
ParserName: vimRegistryEventVMwareCarbonBlackCloud
EquivalentBuiltInParser: _Im_RegistryEvent_VMwareCarbonBlackCloud
ParserQuery: |
  let EventTypeLookup = datatable (temp_action: string, EventType: string)
      [
      "ACTION_WRITE_VALUE", "RegistryValueSet",
      "ACTION_CREATE_KEY", "RegistryKeyCreated",
      "ACTION_DELETE_KEY", "RegistryKeyDeleted",
      "ACTION_DELETE_VALUE", "RegistryValueDeleted",
      "ACTION_RENAME_KEY", "RegistryKeyRenamed"
  ];
  let parser=() {
      CarbonBlackEvents_CL
      | where eventType_s == "endpoint.event.regmod" and isnotempty(regmod_name_s)
      | extend temp_action = case(
                          action_s has "|" and action_s has "delete",
                          "ACTION_DELETE_KEY",
                          action_s has "|" and action_s !has "delete",
                          "ACTION_CREATE_KEY",
                          action_s
                      )
      | where temp_action in ("ACTION_WRITE_VALUE", "ACTION_CREATE_KEY", "ACTION_DELETE_KEY", "ACTION_DELETE_VALUE", "ACTION_RENAME_KEY")
      | lookup EventTypeLookup on temp_action
      | extend
          ActingProcessId = tostring(toint(process_pid_d)),
          EventStartTime = todatetime(split(createTime_s, '+')[0]),
          ParentProcessId = tostring(toint(parent_pid_d)),
          AdditionalFields = bag_pack(
                                "org_key", org_key_s,
                                "process_guid", process_guid_s,
                                "parent_guid", parent_guid_s 
                            )
      | project-rename
          ActorUsername = process_username_s,
          RegistryKey = regmod_name_s,
          DvcHostname = device_name_s,
          DvcIpAddr = device_external_ip_s,
          DvcScope = device_group_s,
          EventUid = _ResourceId,
          ActingProcessName = process_path_s,
          DvcId = device_id_s,
          DvcOs = device_os_s,
          EventMessage = event_description_s,
          EventOriginalType = action_s,
          EventOriginalUid = event_id_g,
          EventOwner = event_origin_s,
          ParentProcessName = processDetails_parentName_s
      | extend
          EventCount = toint(1),
          EventProduct = "Carbon Black Cloud",
          EventResult = "Success",
          EventSchemaVersion = "0.1.2"
      | extend
          Dvc = coalesce(DvcId, DvcHostname, DvcIpAddr),
          EventEndTime = EventStartTime,
          Process = ActingProcessName,
          User = ActorUsername,
          ActorUsernameType = _ASIM_GetUsernameType(ActorUsername)
      | project-away
          *_d,
          *_s,
          *_g,
          *_b,
          temp_action,
          Computer,
          MG,
          ManagementGroupName,
          RawData,
          SourceSystem,
          TenantId
  };
  parser()