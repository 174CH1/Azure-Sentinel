Parser:
  Title: Web Session ASIM parser for Cisco Firepower
  Version: '0.1.0'
  LastUpdated: Sep 04 2023
Product:
  Name: Cisco Firepower
Normalization:
  Schema: WebSession
  Version: '0.2.6'
References:
- Title: ASIM Web Session Schema
  Link: https://aka.ms/ASimWebSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
- Title: Cisco Firepower Documentation
  Link: 
    https://github.com/CiscoSecurity/fp-05-firepower-cli/tree/master/estreamer
    https://www.cisco.com/c/en/us/td/docs/security/firepower/620/api/eStreamer/EventStreamerIntegrationGuide/IS-DCRecords.html#88027
    https://www.cisco.com/c/en/us/td/docs/security/firepower/620/api/eStreamer/EventStreamerIntegrationGuide/IS-DCRecords.html#84248
Description: |
  This ASIM parser supports normalizing Cisco Firepower logs to the ASIM Web Session normalized schema.
ParserName: ASimWebSessionCiscoFirepower
EquivalentBuiltInParser: _ASim_WebSession_CiscoFirepower
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let EventFieldsLookup = datatable(
      DeviceAction: string, 
      DvcAction: string,
      EventResult: string
  )
      [
      "Detect", "Allow", "Partial",
      "Block", "Deny", "Failure",
      "Malware Cloud Lookup", "Deny", "Failure",
      "Malware Block", "Deny", "Failure",
      "Malware Allow List", "Allow", "Success",
      "Cloud Lookup Timeout", "Deny", "Failure",
      "Custom Detection", "Allow", "Partial",
      "Custom Detection Block", "Deny", "Failure",
      "Archive Block-Depth Exceeded", "Deny", "Failure",
      "Archive Block-Encrypted", "Encrypt", "Failure",
      "Archive Block-Failed to Inspect", "Deny", "Failure"
  ];
  let DirectionLookup = datatable (CommunicationDirection: string, NetworkDirection: string)[
      "1", "Inbound",
      "2", "Outbound"
  ];
  let parser=(disabled: bool=false) {
      let alllogs=CommonSecurityLog
          | where not(disabled) and DeviceVendor == "Cisco" and DeviceProduct == "Firepower"
          | where DeviceEventClassID in("File:500:1", "FileMalware:502:1", "FireAMP:125:1")
          | parse-kv AdditionalExtensions as (start: long) with (pair_delimiter=';', kv_delimiter='=');
      let Fireamplogs = alllogs
          | where DeviceEventClassID == "FireAMP:125:1"
          | extend
              EventMessage = DeviceCustomString5,
              ThreatId = EventOutcome,
              ThreatName = DeviceCustomString2
          | extend AdditionalFields = bag_pack(
                                  "policy",
                                  DeviceCustomString1,
                                  "process",
                                  SourceProcessName,
                                  "connectionInstance",
                                  ProcessID,
                                  "RequestClientApplication",
                                  RequestClientApplication
                              )
          | project-rename DstUsername = DestinationUserName
          | extend
              DstUsernameType = _ASIM_GetUsernameType(DstUsername),
              DstUserType = _ASIM_GetUserType(DstUsername, "");
      let Filelogs = alllogs
          | where DeviceEventClassID in ("File:500:1", "FileMalware:502:1")
          | extend AdditionalFields = bag_pack(
                                  "connectionInstance",
                                  ProcessID,
                                  "signaturedata",
                                  DeviceCustomString4,
                                  "RequestClientApplication",
                                  RequestClientApplication
                              );
      union Fireamplogs, Filelogs
      | invoke _ASIM_ResolveNetworkProtocol('Protocol')
      | extend NetworkProtocol = iff(NetworkProtocol == "Unassigned" and Protocol !in (63, 68, 99, 114, 253, 254), Protocol, NetworkProtocol)
      | lookup DirectionLookup on CommunicationDirection
      | lookup EventFieldsLookup on DeviceAction
      | extend
          EventStartTime = coalesce(unixtime_milliseconds_todatetime(start), unixtime_milliseconds_todatetime(tolong(ReceiptTime))),
          DstIpAddr = coalesce(DestinationIP, DeviceCustomIPv6Address3),
          SrcIpAddr = coalesce(SourceIP, DeviceCustomIPv6Address2),
          EventSeverity = case(
                      DvcAction == "Allow" and DeviceCustomString3 =~ "Malware",
                      "High",
                      DvcAction == "Deny" and DeviceCustomString3 =~ "Malware",
                      "Medium",
                      DvcAction == "Deny" and DeviceCustomString3 !~ "Malware",
                      "Low",
                      "Informational"
                  ),
          EventOriginalType = case(
                          DeviceEventClassID has "File:500:1",
                          "File Event",
                          DeviceEventClassID has "FileMalware:502:1",
                          "FileMalware Event",
                          Activity
                      ),
          FileContentType = FileType,
          HttpContentType = FileType,
          FileSize = tolong(FileSize)
      | extend Ip_device = iff(DeviceName matches regex "(([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.(([0-9]{1,3})))", DeviceName, "")
      | extend DvcIpAddr = Ip_device,
              DeviceName = iff(isempty(Ip_device), DeviceName, "")
      | extend host = coalesce(DeviceName, Computer)
      | invoke _ASIM_ResolveDvcFQDN('host')
      | extend 
          EventCount = int(1),
          EventSchema = "WebSession",
          EventSchemaVersion = "0.2.6",
          EventType = "HTTPsession"
      | project-rename
          EventVendor = DeviceVendor,
          EventProduct = DeviceProduct,
          EventProductVersion = DeviceVersion,
          DstPortNumber = DestinationPort,
          SrcUsername = SourceUserName,
          Url = RequestURL,
          FileSHA256 = FileHash,
          SrcPortNumber = SourcePort,
          EventOriginalSeverity = LogSeverity,
          EventOriginalUid = ExtID,
          NetworkApplicationProtocol = ApplicationProtocol,
          ThreatOriginalConfidence = ThreatConfidence,
          EventUid = _ItemId,
          DvcId = DeviceExternalID,
          DvcOriginalAction = DeviceAction
      | extend
          SrcUsernameType = _ASIM_GetUsernameType(SrcUsername),
          SrcUserType = _ASIM_GetUserType(SrcUsername, ""),
          HashType = "SHA256",
          DvcIdType = "Other",
          NetworkProtocolVersion=case(DstIpAddr has ".", "IPv4", DstIpAddr has ":", "IPv6", "")
      | extend
          IpAddr = SrcIpAddr,
          Hash = FileSHA256,
          User = SrcUsername,
          EventEndTime = EventStartTime,
          Dst = DstIpAddr,
          Src = SrcIpAddr,
          Dvc = coalesce(DvcIpAddr, DvcHostname)
      | project-away
          Source*,
          Destination*,
          Device*,
          start,
          AdditionalExtensions,
          Activity,
          CommunicationDirection,
          Computer,
          EndTime,
          EventOutcome,
          FieldDevice*,
          Flex*,
          FileID,
          FileModificationTime,
          Old*,
          FileCreateTime,
          FilePermission,
          IndicatorThreatType,
          MaliciousIP*,
          Message,
          OriginalLogSeverity,
          Process*,
          Protocol,
          ReceivedBytes,
          SentBytes,
          Remote*,
          Request*,
          SimplifiedDeviceAction,
          StartTime,
          TenantId,
          ThreatDescription,
          ThreatSeverity,
          FilePath,
          FileType,
          Reason,
          ReceiptTime,
          ExternalID,
          ReportReferenceLink,
          Ip_*,
          host*,
          _ResourceId
  };
  parser(disabled=disabled)