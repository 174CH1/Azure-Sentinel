Parser:
  Title: Web Session ASIM filtering parser for Cisco Firepower
  Version: '0.2'
  LastUpdated: Jun 28 2023
Product:
  Name: Cisco Firepower
Normalization:
  Schema: WebSession
  Version: '0.2.6'
References:
- Title: ASIM Web Session Schema
  Link: https://aka.ms/ASimWebSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
- Title: Cisco Firepower Documentation
  Link: https://www.cisco.com/c/en/us/td/docs/security/firepower/620/api/eStreamer/EventStreamerIntegrationGuide/Intro.html
Description: |
  This ASIM parser supports filtering and normalizing Cisco Firepower logs to the ASIM Web Session normalized schema.
ParserName: vimWebSessionCiscoFirepower
EquivalentBuiltInParser: _Im_WebSession_CiscoFirepower
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: url_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: httpuseragent_has_any
    Type: dynamic 
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let ProtocolLookup=datatable(Protocol: string, NetworkProtocol: string)[
    "0", "HOPOPT",
    "1", "ICMP",
    "2", "IGMP",
    "3", "GGP",
    "4", "IPv4",
    "5", "ST",
    "6", "TCP",
    "7", "CBT",
    "8", "EGP",
    "9", "IGP",
    "10", "BBN-RCC-MON",
    "11", "NVP-II",
    "12", "PUP",
    "13", "ARGUS (deprecated)",
    "14", "EMCON",
    "15", "XNET",
    "16", "CHAOS",
    "17", "UDP",
    "18", "MUX",
    "19", "DCN-MEAS",
    "20", "HMP",
    "21", "PRM",
    "22", "XNS-IDP",
    "23", "TRUNK-1",
    "24", "TRUNK-2",
    "25", "LEAF-1",
    "26", "LEAF-2",
    "27", "RDP",
    "28", "IRTP",
    "29", "ISO-TP4",
    "30", "NETBLT",
    "31", "MFE-NSP",
    "32", "MERIT-INP",
    "33", "DCCP",
    "34", "3PC",
    "35", "IDPR",
    "36", "XTP",
    "37", "DDP",
    "38", "IDPR-CMTP",
    "39", "TP++",
    "40", "IL",
    "41", "IPv6",
    "42", "SDRP",
    "43", "IPv6-Route",
    "44", "IPv6-Frag",
    "45", "IDRP",
    "46", "RSVP",
    "47", "GRE",
    "48", "DSR",
    "49", "BNA",
    "50", "ESP",
    "51", "AH",
    "52", "I-NLSP",
    "53", "SWIPE (deprecated)",
    "54", "NARP",
    "55", "MOBILE",
    "56", "TLSP",
    "57", "SKIP",
    "58", "IPv6-ICMP",
    "59", "IPv6-NoNxt",
    "60", "IPv6-Opts",
    "61", "",
    "62", "CFTP",
    "63", "",
    "64", "SAT-EXPAK",
    "65", "KRYPTOLAN",
    "66", "RVD",
    "67", "IPPC",
    "68", "",
    "69", "SAT-MON",
    "70", "VISA",
    "71", "IPCV",
    "72", "CPNX",
    "73", "CPHB",
    "74", "WSN",
    "75", "PVP",
    "76", "BR-SAT-MON",
    "77", "SUN-ND",
    "78", "WB-MON",
    "79", "WB-EXPAK",
    "80", "ISO-IP",
    "81", "VMTP",
    "82", "SECURE-VMTP",
    "83", "VINES",
    "84", "TTP",
    "84", "IPTM",
    "85", "NSFNET-IGP",
    "86", "DGP",
    "87", "TCF",
    "88", "EIGRP",
    "89", "OSPFIGP",
    "90", "Sprite-RPC",
    "91", "LARP",
    "92", "MTP",
    "93", "AX.25",
    "94", "IPIP",
    "95", "MICP (deprecated)",
    "96", "SCC-SP",
    "97", "ETHERIP",
    "98", "ENCAP",
    "99", "",
    "100", "GMTP",
    "101", "IFMP",
    "102", "PNNI",
    "103", "PIM",
    "104", "ARIS",
    "105", "SCPS",
    "106", "QNX",
    "107", "A/N",
    "108", "IPComp",
    "109", "SNP",
    "110", "Compaq-Peer",
    "111", "IPX-in-IP",
    "112", "VRRP",
    "113", "PGM",
    "114", "",
    "115", "L2TP",
    "116", "DDX",
    "117", "IATP",
    "118", "STP",
    "119", "SRP",
    "120", "UTI",
    "121", "SMP",
    "122", "SM (deprecated)",
    "123", "PTP",
    "124", "ISIS over IPv4",
    "125", "FIRE",
    "126", "CRTP",
    "127", "CRUDP",
    "128", "SSCOPMCE",
    "129", "IPLT",
    "130", "SPS",
    "131", "PIPE",
    "132", "SCTP",
    "133", "FC",
    "134", "RSVP-E2E-IGNORE",
    "135", "Mobility Header",
    "136", "UDPLite",
    "137", "MPLS-in-IP",
    "138", "manet",
    "139", "HIP",
    "140", "Shim6",
    "141", "WESP",
    "142", "ROHC",
    "143", "Ethernet",
    "253", "",
    "254", "",
    "255", "Reserved"
  ];
  let ActionLookup=datatable(
      DeviceAction: string,
      DvcOriginalAction: string, 
      DvcAction: string,
      EventResult: string
  )
      [
      "1", "Detect", "Allow", "Partial",
      "2", "Block", "Deny", "Failure",
      "3", "Malware Cloud Lookup", "Deny", "Failure",
      "4", "Malware Block", "Deny", "Failure",
      "5", "Malware Allow List", "Allow", "Success",
      "6", "Cloud Lookup Timeout", "Deny", "Failure",
      "7", "Custom Detection", "Allow", "Partial",
      "8", "Custom Detection Block", "Deny", "Failure",
      "9", "Archive Block-Depth Exceeded", "Deny", "Failure",
      "10", "Archive Block-Encrypted", "Encrypt", "Failure",
      "11", "Archive Block-Failed to Inspect", "Deny", "Failure"
  ];
  let DirectionLookup = datatable (CommunicationDirection: string, NetworkDirection: string)[
      "1", "Inbound",
      "2", "Outbound"
  ];
  let parser=(starttime: datetime=datetime(null), 
      endtime: datetime=datetime(null),
      srcipaddr_has_any_prefix: dynamic=dynamic([]),
      dstipaddr_has_any_prefix: dynamic=dynamic([]),
      ipaddr_has_any_prefix: dynamic=dynamic([]), 
      url_has_any: dynamic=dynamic([]),
      httpuseragent_has_any: dynamic=dynamic([]),
      eventresult: string='*',
      disabled: bool=false) {
      let src_or_any = set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
      let dst_or_any = set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);
      let alllogs=CommonSecurityLog
          | where not(disabled) 
          | parse-kv AdditionalExtensions as (start: long) with (pair_delimiter=';', kv_delimiter='=')
          | extend EventStartTime = coalesce(unixtime_milliseconds_todatetime(start), unixtime_milliseconds_todatetime(tolong(ReceiptTime)))
          | extend EventEndTime = EventStartTime
          | where (isnull(starttime) or EventStartTime >= starttime) and (isnull(endtime) or EventEndTime <= endtime)
          | where DeviceVendor == "Cisco" and DeviceProduct == "Firepower"
          | where DeviceEventClassID in("File:500:1", "FileMalware:502:1", "FireAMP:125:1")
          | lookup ActionLookup on DeviceAction
          | where ((array_length(url_has_any) == 0) or RequestURL has_any (url_has_any) or RequestURL == "")
          | where ((eventresult == "*") or EventResult == eventresult or EventResult == "")
          | where ((array_length(httpuseragent_has_any) == 0) or RequestClientApplication has_any (httpuseragent_has_any) or RequestClientApplication == "")
          | extend
              temp_isSrcMatch=has_any_ipv4_prefix(SourceIP, src_or_any), 
              temp_isDstMatch=has_any_ipv4_prefix(DestinationIP, dst_or_any)
          | extend ASimMatchingIpAddr = case(
                                    array_length(src_or_any) == 0 and array_length(dst_or_any) == 0,
                                    "-",
                                    (temp_isSrcMatch and temp_isDstMatch),
                                    "Both", 
                                    temp_isSrcMatch,
                                    "SrcIpAddr",
                                    temp_isDstMatch,
                                    "DstIpAddr",
                                    "No match"
                                )
          | where ASimMatchingIpAddr != "No match"
      ;
      let Fireamplogs = alllogs
          | where DeviceEventClassID == "FireAMP:125:1"
          | extend
              EventMessage = DeviceCustomString5,
              ThreatId = EventOutcome,
              ThreatName = DeviceCustomString2,
              DstUsernameType = "Simple"
          | extend AdditionalFields = bag_pack(
                                  "policy",
                                  DeviceCustomString1,
                                  "process",
                                  SourceProcessName,
                                  "connectionInstance",
                                  ProcessID
                              )
          | project-rename DstUsername = DestinationUserName;
      let Filelogs = alllogs
          | where DeviceEventClassID in ("File:500:1", "FileMalware:502:1")
          | extend AdditionalFields = bag_pack(
                                  "connectionInstance",
                                  ProcessID,
                                  "signaturedata",
                                  DeviceCustomString4
                              );
      union isfuzzy=false Fireamplogs, Filelogs
      | lookup ProtocolLookup on Protocol
      | lookup DirectionLookup on CommunicationDirection
      | extend EventStartTime = coalesce(unixtime_milliseconds_todatetime(start),unixtime_milliseconds_todatetime(tolong(ReceiptTime))),
              EventCount = int(1),
              EventSchema = "WebSession",
              EventSchemaVersion = "0.2.6",
              EventType = "HTTPsession",
              DstIpAddr = coalesce(DestinationIP, DeviceCustomIPv6Address3),
              SrcIpAddr = coalesce(SourceIP, DeviceCustomIPv6Address2),
              HashType = "SHA256",
              EventSeverity = case(DvcAction == "Allow" and DeviceCustomString3 == "3", "High",
                                  DvcAction == "Deny" and DeviceCustomString3 == "3", "Medium",
                                  DvcAction == "Deny" and DeviceCustomString3 != "3", "Low",
                                  "Informational"),
              EventOriginalType = case(DeviceEventClassID has "File:500:1", "File Event",
                                      DeviceEventClassID has "FileMalware:502:1", "FileMalware Event",
                                      Activity),
              FileContentType = FileType,
              HttpContentType = FileType,
              SrcUsernameType = "Simple"
      | invoke _ASIM_ResolveDvcFQDN('Computer')
      | extend EventEndTime = EventStartTime,
              NetworkProtocolVersion=case(DstIpAddr has ".", "IPv4", DstIpAddr has ":", "IPv6", ""),
              Dst = DstIpAddr,
              Src = SrcIpAddr,
              Dvc = DeviceName,
              FileSize = tolong(FileSize)
      | project-rename
          EventVendor = DeviceVendor,
          EventProduct = DeviceProduct,
          EventProductVersion = DeviceVersion,
          DstPortNumber = DestinationPort,
          SrcUsername = SourceUserName,
          Url = RequestURL,
          FileSHA256 = FileHash,
          SrcPortNumber = SourcePort,
          HttpUserAgent = RequestClientApplication,
          EventOriginalSeverity = LogSeverity,
          EventOriginalUid = ExtID,
          NetworkApplicationProtocol = ApplicationProtocol,
          ThreatOriginalConfidence = ThreatConfidence,
          EventUid=_ResourceId
      | extend UserAgent = HttpUserAgent,
              IpAddr = SrcIpAddr,
              Hash = FileSHA256,
              User = SrcUsername
      | project-away Source*, Destination*, Device*, start, AdditionalExtensions, Activity, CommunicationDirection, Computer, EndTime, EventOutcome, FieldDevice*, Flex*, FileID, FileModificationTime, Old*, FileCreateTime, FilePermission, IndicatorThreatType, MaliciousIP*, Message, OriginalLogSeverity, Process*, Protocol, ReceivedBytes, SentBytes, Remote*, Request*, SimplifiedDeviceAction, StartTime, TenantId, ThreatDescription, ThreatSeverity, FilePath, FileType, Reason, ReceiptTime, ExternalID, ReportReferenceLink, temp*
  };
  parser(
      starttime=starttime, 
      endtime=endtime,
      srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
      dstipaddr_has_any_prefix=dstipaddr_has_any_prefix,
      ipaddr_has_any_prefix=ipaddr_has_any_prefix, 
      url_has_any=url_has_any,
      httpuseragent_has_any=httpuseragent_has_any,
      eventresult=eventresult,
      disabled=disabled
  )            