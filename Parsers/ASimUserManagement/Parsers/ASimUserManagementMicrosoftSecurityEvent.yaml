Parser:
  Title: User Management ASIM parser for Microsoft Security Event logs
  Version: '0.1.0'
  LastUpdated: 16 Jul, 2023
Product:
  Name: Microsoft
Normalization:
  Schema: UserManagement
  Version: '0.1.1'
References:
- Title: ASIM User Management Schema
  Link: https://aka.ms/ASimUserManagementDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Microsoft Security Event logs delivered using AMA to the ASIM UserManagement normalized schema.
ParserName: ASimUserManagementMicrosoftSecurityEvent
EquivalentBuiltInParser: _ASim_UserManagement_MicrosoftSecurityEvent
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser = (
      disabled:bool = false
  ) {
      let EventIDLookup = datatable(EventID:int, EventType:string, EventSubtype:string, GroupType:string)
      [   
          "4720", "UserCreated", "UserCreated", "", 
          "4722", "UserEnabled", "UserModified", "", 
          "4723", "PasswordChanged", "UserModified", "", 
          "4724", "PasswordReset", "UserModified", "", 
          "4725", "UserDisabled", "UserModified", "", 
          "4726", "UserDeleted", "UserModified", "", 
          "4727", "GroupCreated", "GroupCreated", "Global Security Enabled", 
          "4728", "UserAddedToGroup", "GroupModified", "Global Security Enabled", 
          "4729", "UserRemovedFromGroup", "GroupModified", "Global Security Enabled", 
          "4730", "GroupDeleted", "GroupModified", "Global Security Enabled", 
          "4731", "GroupCreated", "GroupCreated", "Local Security Enabled", 
          "4732", "UserAddedToGroup", "GroupModified", "Local Security Enabled", 
          "4733", "UserRemovedFromGroup", "GroupModified", "Local Security Enabled", 
          "4734", "GroupDeleted", "GroupModified", "Local Security Enabled", 
          "4738", "UserModified", "UserModified", "", 
          "4740", "UserLocked", "UserModified", "", 
          "4744", "GroupCreated", "GroupCreated", "Local Distribution", 
          "4748", "GroupDeleted", "GroupModified", "Local Distribution", 
          "4749", "GroupCreated", "GroupCreated", "Global Distribution", 
          "4753", "GroupDeleted", "GroupModified", "Global Distribution", 
          "4754", "GroupCreated", "GroupCreated", "Universal Security Enabled", 
          "4756", "UserAddedToGroup", "GroupModified", "Universal Security Enabled", 
          "4757", "UserRemovedFromGroup", "GroupModified", "Universal Security Enabled", 
          "4758", "GroupDeleted", "GroupModified", "Universal Security Enabled", 
          "4759", "GroupCreated", "GroupCreated", "Universal Distribution", 
          "4763", "GroupDeleted", "GroupModified", "Universal Distribution", 
          "4767", "UserLocked", "UserModified", "", 
          "4781", "UserModified", "UserModified", "" 
      ];
      let UserTypeLookup = datatable (AccountType:string, ActorOriginalUserType:string)
      [
          'User', 'Regular',
          'Machine', 'Machine'
      ]; 
      let UserEventID = toscalar(
          EventIDLookup
          | where not(disabled)
          | where EventSubtype in("UserCreated","UserModified") 
          | summarize make_set(EventID)
      );
      let GroupEventID = toscalar(
          EventIDLookup
          | where not(disabled)
          | where EventSubtype in("GroupCreated","GroupModified")  
          | summarize make_set(EventID)
      );
      union (
          WindowsEvent
          | where not(disabled)
          | where EventID in(UserEventID)
          | extend
              ActorOriginalUserType = tostring(EventData.AccountType),
              ActorSessionId = tostring(EventData.SubjectLogonId),
              ActorUserId = tostring(EventData.SubjectUserSid),
              NewTargetUserName = tostring(EventData.NewTargetUserName),
              OldTargetUserName = tostring(EventData.OldTargetUserName),
              SubjectDomainName = tostring(EventData.SubjectDomainName),
              SubjectUserName = tostring(EventData.SubjectUserName),
              TargetDomain = tostring(EventData.TargetDomainName),
              TargetUserId = tostring(EventData.TargetSid),
              TargetUsername = tostring(EventData.TargetUserName)
          | project-rename
              NewPropertyValue = NewTargetUserName,
              PreviousPropertyValue = OldTargetUserName
          | extend 
              TargetUsername = coalesce(TargetUsername, PreviousPropertyValue)
          | project TimeGenerated, Type, EventID, Computer, _ResourceId, _ItemId, TargetDomain, TargetUserId, TargetUsername, ActorUserId, SubjectDomainName, SubjectUserName, ActorOriginalUserType, ActorSessionId, NewPropertyValue, PreviousPropertyValue
          | extend
              TargetUserIdType = iif(isnotempty(TargetUserId), "SID",""),
              TargetUsername = iff (TargetDomain == "", TargetUsername, strcat (TargetDomain, '\\', TargetUsername))
      ),(
          SecurityEvent
          | where not(disabled)
          | where EventID in(UserEventID)
          | project-rename 
              ActorOriginalUserType = AccountType,
              ActorSessionId = SubjectLogonId,
              ActorUserId = SubjectUserSid,
              TargetDomain = TargetDomainName,
              TargetUserId = TargetSid,
              TargetUsername = TargetUserName
          | parse-kv EventData as 
              (
                  OldTargetUserName:string,
                  NewTargetUserName:string
              ) 
              with (regex=@'<Data Name="(\w+)">{?([^<]*?)}?</Data>')
          | project-rename
              NewPropertyValue = NewTargetUserName,
              PreviousPropertyValue = OldTargetUserName
          | extend 
              TargetUsername = coalesce(TargetUsername, PreviousPropertyValue)
          | project TimeGenerated, Type, EventID, Computer, _ResourceId, _ItemId, TargetDomain, TargetUserId, TargetUsername, ActorUserId, SubjectDomainName, SubjectUserName, ActorOriginalUserType, ActorSessionId, NewPropertyValue, PreviousPropertyValue
          | extend
              TargetUserIdType = iif(isnotempty(TargetUserId), "SID",""),
              TargetUsername = iff (TargetDomain == "", TargetUsername, strcat (TargetDomain, '\\', TargetUsername))
      ),(
          WindowsEvent
          | where not(disabled)
          | where EventID in(GroupEventID)
          | extend 
              ActorOriginalUserType = tostring(EventData.AccountType),
              ActorSessionId = tostring(EventData.SubjectLogonId),
              ActorUserId = tostring(EventData.SubjectUserSid),
              GroupDomain = tostring(EventData.TargetDomainName),
              GroupId = tostring(EventData.TargetSid),
              GroupName = tostring(EventData.TargetUserName),
              MemberName = tostring(EventData.MemberName),
              MemberSid = tostring(EventData.MemberSid),
              NewTargetUserName = tostring(EventData.NewTargetUserName),
              OldTargetUserName = tostring(EventData.OldTargetUserName),
              SubjectDomainName = tostring(EventData.SubjectDomainName),
              SubjectUserName = tostring(EventData.SubjectUserName)
          | extend 
              GroupName = iff (GroupDomain == "", GroupName, strcat (GroupDomain, "\\" ,GroupName)),
              TargetUserId = MemberSid,
              TargetUsername = MemberName
          | project TimeGenerated, Type, EventID, Computer, _ResourceId, _ItemId, GroupId, GroupName, ActorUserId, SubjectDomainName, SubjectUserName, ActorOriginalUserType, ActorSessionId, TargetUsername, TargetUserId
          | extend 
              GroupIdType = iif(isnotempty(GroupId), "SID","")
      ),(
          SecurityEvent
          | where not(disabled)
          | where not (EventID in (4744, 4748, 4749, 4753, 4759, 4763))
          | where EventID in(GroupEventID)
          | project-rename 
              ActorOriginalUserType = AccountType,
              ActorSessionId = SubjectLogonId,
              ActorUserId = SubjectUserSid,
              GroupDomain = TargetDomainName,
              GroupId = TargetSid,
              GroupName = TargetUserName
          | extend GroupName = iff (GroupDomain == "", GroupName, strcat (GroupDomain, "\\" ,GroupName))
          | parse-kv EventData as 
              (
                  MemberName:string,
                  MemberSid:string
              ) 
              with (regex=@'<Data Name="(\w+)">{?([^<]*?)}?</Data>')
          | project-rename 
              TargetUsername = MemberName,
              TargetUserId = MemberSid
          | project TimeGenerated, Type, EventID, Computer, _ResourceId, _ItemId, GroupId, GroupName, ActorUserId, SubjectDomainName, SubjectUserName, ActorOriginalUserType, ActorSessionId, TargetUsername, TargetUserId
          | extend 
              GroupIdType = iif(isnotempty(GroupId), "SID","")
      ),(
          SecurityEvent
          | where not(disabled)
          | where EventID in (4744, 4748, 4749, 4753, 4759, 4763)
          | parse-kv EventData as 
            (
                TargetUserName:string,
                TargetDomainName:string,
                TargetSid:string,
                SubjectUserSid:string,
                AccountType:string,
                SubjectLogonId:string,
                SubjectDomainName:string,
                SubjectUserName:string
            ) 
            with (regex=@'<Data Name="(\w+)">{?([^<]*?)}?</Data>')
          | project-rename 
              ActorOriginalUserType = AccountType,
              ActorSessionId = SubjectLogonId,
              ActorUserId = SubjectUserSid,
              GroupDomain = TargetDomainName,
              GroupId = TargetSid,
              GroupName = TargetUserName
          | extend GroupName = iff (GroupDomain == "", GroupName, strcat (GroupDomain, "\\" ,GroupName))
          | parse-kv EventData as 
              (
                  MemberName:string,
                  MemberSid:string
              ) 
              with (regex=@'<Data Name="(\w+)">{?([^<]*?)}?</Data>')
          | project-rename 
              TargetUserId = MemberSid,
              TargetUsername = MemberName
          | project TimeGenerated, Type, EventID, Computer, _ResourceId, _ItemId, GroupId, GroupName, ActorUserId, SubjectDomainName, SubjectUserName, ActorOriginalUserType, ActorSessionId, TargetUsername, TargetUserId
          | extend 
              GroupIdType = iif(isnotempty(GroupId), "SID","")
      )
  | lookup EventIDLookup on EventID
  | invoke _ASIM_ResolveDvcFQDN ("Computer")
  | lookup UserTypeLookup on ActorOriginalUserType
  | project-rename 
      DvcId = _ResourceId,
      EventUid = _ItemId
  | extend 
      ActorDomain = SubjectDomainName,
      ActorUserIdType = iif(isnotempty(ActorUserId), "SID",""),
      ActorUsername = iff (SubjectDomainName == "", SubjectUserName, strcat (SubjectDomainName, '\\', SubjectUserName)),
      Dvc = DvcHostname,
      DvcIdType = iff (DvcId == "", "", "AzureResourceID"),
      DvcOs = "Windows",
      EventCount = int(1),
      EventEndTime = TimeGenerated,
      EventOriginalType = tostring(EventID),
      EventProduct = 'Security Events',
      EventResult = "Success",
      EventSchema = "UserManagement",
      EventSchemaVersion = "0.1.1",
      EventSeverity = "Informational",
      EventStartTime = TimeGenerated,
      EventVendor = 'Microsoft',
      Hostname = DvcHostname
  | project-away Subject*
  | extend
      ActorUsernameType = _ASIM_GetUsernameType(ActorUsername),
      GroupNameType = _ASIM_GetUsernameType(GroupName),
      TargetUsernameType = _ASIM_GetUsernameType(TargetUsername),
      User = ActorUsername
  };
  parser (disabled=disabled)