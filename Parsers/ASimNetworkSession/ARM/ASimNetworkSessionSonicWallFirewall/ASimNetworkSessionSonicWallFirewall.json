{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "ASimNetworkSessionSonicWallFirewall",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Network Session ASIM parser for SonicWall firewalls.",
            "category": "ASIM",
            "FunctionAlias": "ASimNetworkSessionSonicWallFirewall",
            "query": "let Actions=datatable(fw_action:string,DvcAction:string)\n[ \"reset client\",\"Reset Source\"\n, \"reset server\",\"Reset Destination\"\n, \"reset both\", \"Reset\" \n, \"allow\",\"Allow\"\n, \"\\\"forward\\\"\",\"Allow\"\n, \"\\\"mgmt\\\"\",\"Other\"\n, \"\\\"NA\\\"\",\"Other\"\n, \"deny\",\"Deny\"\n, \"\\\"drop\\\"\", \"Drop\"\n, \"drop ICMP\", \"Drop ICMP\"];\nlet Parser=(disabled:bool=false){\nCommonSecurityLog\n| where not(disabled)\n| where DeviceVendor == \"SonicWall\"\n| where DeviceEventClassID !in (14, 97, 1382)\n| where ( isnotempty(SourceIP) or isnotempty(DestinationIP) )\n| parse-kv AdditionalExtensions as (['gcat']:string, ['snpt']:string, ['dnpt']:string, ['susr']:string,['appName']:string, ['appcat']:string, ['appid']:string, ['sid']:string, ['catid']:string, ['ipscat']:string, ['ipspri']:string, ['spycat']:string, ['spypri']:string, ['fw_action']:string, ['dpi']:string, ['bid']:string, ['af_action']:string, ['af_polid']:string, ['af_policy']:string, ['af_type']:string, ['af_service']:string, ['af_object']:string, ['contentObject']:string, ['fileid']:string, ['uuid']:string) with (pair_delimiter=\";\", kv_delimiter=\"=\")\n| lookup Actions on fw_action\n// Sets the mandatory EventResult based on the DvcAction.\n| extend EventResult = case(DvcAction == \"Allow\", \"Success\",\n                          DvcAction == \"Management\", \"NA\",\n                          DvcAction == \"NA\", \"NA\",\n                          DvcAction == \"Other\", \"NA\",\n                          \"Failure\"\n                          )\n| extend sosLogMsgSeverity = case(LogSeverity == 10, \"Emergency (0)\",\n                                            LogSeverity == 9, \"Alert (1)\",\n                                            LogSeverity == 8, \"Critical (2)\",\n                                            LogSeverity == 7, \"Error (3)\",\n                                            LogSeverity == 6, \"Warning (4)\",\n                                            LogSeverity == 5, \"Notice (5)\",\n                                            LogSeverity == 4, \"Info (6)/Debug (7)\",\n                                            LogSeverity == 3, \"Not Mapped (3)\",\n                                            LogSeverity == 2, \"Not Mapped (2)\",\n                                            LogSeverity == 1, \"Not Mapped (1)\",\n                                            \"Not Mapped\"\n                                            )\n| extend EventSeverity = case(tolong(LogSeverity) <= 4, \"Informational\",\n                                            tolong(LogSeverity) <= 6, \"Low\",\n                                            tolong(LogSeverity) <= 8, \"Medium\",\n                                            tolong(LogSeverity) > 8, \"High\",\n                                            \"\"\n                                            )\n| extend HttpRequestMethod = case(RequestMethod == 0, \"No Operation (0)\",\n                                            RequestMethod == 1, \"HTTP GET (1)\",\n                                            RequestMethod == 2, \"HTTP POST (2)\",\n                                            RequestMethod == 3, \"HTTP HEAD (3)\",\n                                            \"\"\n                                            )\n| extend NetworkProtocolVersion = case(DestinationIP has \".\", \"IPv4\"\n                                          , DestinationIP has \":\", \"IPv6\"\n                                          , \"\"\n                                          )\n  , NetworkProtocol = toupper(trim_end(@\"/.*\", Protocol))\n  , NetworkApplicationProtocol = tostring(toupper(trim_start(@\".*/\", Protocol)))\n  , sosLogMsgID = DeviceEventClassID\n| project-rename\n  DstMacAddr = DestinationMACAddress\n  , SrcMacAddr = SourceMACAddress\n  , DstIpAddr = DestinationIP\n  , SrcIpAddr = SourceIP\n  , DstPortNumber = DestinationPort\n  , SrcPortNumber = SourcePort\n  , EventMessage = Activity\n  , sosEventMessageDetail = Message\n  , EventProductVersion = DeviceVersion\n  , sosSerialNumber = Computer\n  , DvcOutboundInterface = DeviceOutboundInterface\n  , DvcInboundInterface = DeviceInboundInterface\n  , sosApplicationID = ApplicationProtocol // Application ID number (when Flow Reporting is enabled).\n  , sosCFSFullString = Reason // CFS Category ID and Name\n  , sosRuleDetails = DeviceCustomString1 // Rule ID. Identify a policy or rule associated with an event.\n  , sosSourceVPNPolicyName = DeviceCustomString2 // Displays the source VPN policy name associated with the event.\n  , sosDestinationVPNPolicyName = DeviceCustomString3 // Displays the destination VPN policy name associated with the event.\n  , sosInterfaceStatistics = DeviceCustomString4 // Displays interface statistics.\n  , sosSoleraNPCSURL = DeviceCustomString5 // URL. Applicable only when NPCS Solera is enabled. Displays the URL of an NPCS object.\n  , sosLogMsgNote = DeviceCustomString6 // \"Note\" field. Additional information that is application-dependent.\n  , sosNATSourceIPAddress = DeviceCustomString1Label // NAT'ed source IP4/IPv6 address.\n  , sosNATDestinationIPAddress = DeviceCustomString2Label // NAT'ed destination IPv4/IPv6 address.\n  , sosSourceZone = DeviceCustomString3Label // Source Zone on Gen7. Src Zone Type on Gen6.\n  , sosDestinationZone = DeviceCustomString4Label // Destination Zone on Gen7. Dest Zone Type (Trusted/Untrusted, etc.) on Gen6.\n  , sosUserSessionType = DeviceCustomString5Label // String indicating the user session type, determined by the auth mechanism.\n  , sosUserSessionDuration = DeviceCustomString6Label // User session duration in seconds.\n  , NetworkIcmpType = FieldDeviceCustomNumber1 // ICMP Type\n  , NetworkIcmpCode = FieldDeviceCustomNumber2 // ICMP Code\n  , SrcUsername = SourceUserName\n  , ThreatOriginalConfidence = ThreatConfidence\n  , DstNatIpAddr = DestinationTranslatedAddress\n  , DstNatPortNumber = DestinationTranslatedPort\n  , SrcNatIpAddr = SourceTranslatedAddress\n  , SrcNatPortNumber = SourceTranslatedPort\n  , HttpUserAgent = RequestClientApplication\n| extend\n    gcat = column_ifexists(\"gcat\", 0) // If column doesn't exist, creates the column and sets it to 0. Also avoids errors if returned query is empty.\n  , appcat = column_ifexists(\"appcat\", \"\") // Application Category from App Control. Sets an empty appcat column if column doesn't exist.\n  , ipspri = column_ifexists(\"ipspri\", \"\")\n  , spypri = column_ifexists(\"spypri\", \"\")\n| extend sosLogMsgCategory = case(gcat == 1, \"System (1)\",\n                                              gcat == 2, \"Log (2)\",\n                                              gcat == 3, \"Security Services (3)\",\n                                              gcat == 4, \"Users (4)\",\n                                              gcat == 5, \"Firewall Settings (5)\",\n                                              gcat == 6, \"Network (6)\",\n                                              gcat == 7, \"VPN (7)\",\n                                              gcat == 8, \"High Availability (8)\",\n                                              gcat == 9, \"3G/4G, Modem, and Module (9)\",\n                                              gcat == 10, \"Firewall (10)\",\n                                              gcat == 11, \"Wireless (11)\",\n                                              gcat == 12, \"VoIP (12)\",\n                                              gcat == 13, \"SSL VPN (13)\",\n                                              gcat == 14, \"Anti-Spam (14)\",\n                                              gcat == 15, \"WAN Acceleration (15)\",\n                                              gcat == 16, \"Object (16)\",\n                                              gcat == 17, \"SD-WAN (17)\",\n                                              gcat == 18, \"Multi-Instance (18)\",\n                                              gcat == 19, \"Unified Policy Engine (19)\",\n                                              \"Log Category Not Mapped\"\n                                              )\n| extend sosLegacyMessageCategory = case(DeviceEventCategory == 0, \"None (0)\",\n                                            DeviceEventCategory == 1, \"System Maintenance (1)\",\n                                            DeviceEventCategory == 2, \"System Errors (2)\",\n                                            DeviceEventCategory == 4, \"Blocked Web Sites (4)\",\n                                            DeviceEventCategory == 8, \"Blocked Java Etc. (8)\",\n                                            DeviceEventCategory == 16, \"User Activity (16)\",\n                                            DeviceEventCategory == 32, \"Attacks (32)\",\n                                            DeviceEventCategory == 64, \"Dropped TCP (64)\",\n                                            DeviceEventCategory == 128, \"Dropped UDP (128)\",\n                                            DeviceEventCategory == 256, \"Dropped ICMP (256)\",\n                                            DeviceEventCategory == 512, \"Network Debug (512)\",\n                                            DeviceEventCategory == 1024, \"Connection Closed (1024)\",\n                                            DeviceEventCategory == 2048, \"Dropped LAN TCP (2048)\",\n                                            DeviceEventCategory == 4096, \"Dropped LAN UDP (4096)\",\n                                            DeviceEventCategory == 8192, \"Dropped LAN ICMP (8192)\",\n                                            DeviceEventCategory == 32768, \"Modem Debug (32768)\",\n                                            DeviceEventCategory == 65536, \"VPN Tunnel Status (65536)\",\n                                            DeviceEventCategory == 131072, \"IEEE 802.11 Management (131072)\",\n                                            DeviceEventCategory == 262144, \"Connection Opened (262144)\",\n                                            DeviceEventCategory == 524288, \"System Environment (524288)\",\n                                            DeviceEventCategory == 1048576, \"Expanded - VoIP Activity (1048576)\",\n                                            DeviceEventCategory == 2097152, \"Expanded - WLAN IDS Activity (2097152)\",\n                                            DeviceEventCategory == 4194304, \"Expanded - SonicPoint Activity (4194304)\",\n                                            DeviceEventCategory == 8388608, \"Expanded - Unified Policy Engine (8388608)\",\n                                            \"Legacy Category Not Mapped\"\n                                            )\n| extend sosIPSPriority = case(ipspri == 1, \"High (1)\",\n                                            ipspri == 2, \"Medium (2)\",\n                                            ipspri == 3, \"Low (3)\",\n                                            \"\"\n                                            )\n| extend sosAntiSpywarePriority = case(spypri == 1, \"High (1)\",\n                                            spypri == 2, \"Medium (2)\",\n                                            spypri == 3, \"Low (3)\",\n                                            \"\"\n                                            )\n| extend\n    EventVendor = \"SonicWall\"\n  , EventProduct = \"Firewall\"\n  , sosDeviceModel = DeviceProduct\n  , DvcOs = \"SonicOS\"\n  , DvcOsVersion = EventProductVersion\n  , DvcIdType = \"Other\"\n  , Dvc = sosSerialNumber\n  , DvcDescription = DeviceProduct\n  , ASimMatchingHostname = \"-\"\n  , ASimMatchingIpAddr = \"-\"\n  , NetworkIcmpType = tostring(NetworkIcmpType)\n  , NetworkIcmpCode = toint(NetworkIcmpCode)\n  , NetworkBytes = tolong(coalesce(toint(ReceivedBytes), 0) + coalesce(toint(SentBytes), 0))\n  , FieldDeviceCustomNumber1Label = column_ifexists(\"FieldDeviceCustomNumber1Label\", \"\") // FieldDeviceCustomNumberXLabel (cnXLabel=)\n  , FieldDeviceCustomNumber2Label = column_ifexists(\"FieldDeviceCustomNumber2Label\", \"\") // FieldDeviceCustomNumberXLabel (cnXLabel=)\n  , DeviceCustomNumber1Label = column_ifexists(\"DeviceCustomNumber1Label\", \"\") // DeviceCustomNumberXLabel (cnXLabel=)\n  , DeviceCustomNumber2Label = column_ifexists(\"DeviceCustomNumber2Label\", \"\") // DeviceCustomNumberXLabel (cnXLabel=)\n  , DeviceCustomNumber3Label = column_ifexists(\"DeviceCustomNumber3Label\", \"\") // Connection Duration in milliseconds (for Connnection Closed msgs)\n  , fw_action = column_ifexists(\"fw_action\", \"\")\n  , sosFirewallAction = column_ifexists(\"fw_action\", \"\")\n  , susr = column_ifexists(\"susr\", \"\") // Logged-in username associated with the log event.\n  , af_polid = column_ifexists(\"af_polid\", \"\")\n  , af_action = column_ifexists(\"af_action\", \"\")\n  , af_policy = column_ifexists(\"af_policy\", \"\")\n  , af_service = column_ifexists(\"af_service\", \"\")\n  , af_type = column_ifexists(\"af_type\", \"\")\n  , af_object = column_ifexists(\"af_object\", \"\")\n  , contentObject = column_ifexists(\"contentObject\", \"\") // App Firewall/App Rule Content.\n  , srcV6 = column_ifexists(\"srcV6\", \"\") // Source IPv6 IP\n  , dstV6 = column_ifexists(\"dstV6\", \"\") // Destination IPv6 IP\n  , appName = column_ifexists(\"appName\", \"\") // Non-signature Application name that matches the Application ID \"app\" or \"f\".\n  , app = column_ifexists(\"app\", \"\") // Numeric Application ID. Not the same as \"ApplicationProtocol\".\n  , sosAppCategoryName = extract(@'^[\"]([a-zA-Z-]+)', 1, column_ifexists(\"appcat\", \"\")) // Application Category from App Control\n  , sosAppIDName = extract(@' (.*) --', 1, column_ifexists(\"appcat\", \"\")) // Application Name from App Control\n  , sosAppSignatureName = trim('\"', extract(@'.*-- (.*\\S)', 1, column_ifexists(\"appcat\", \"\"))) // Application Signature Name from App Control\n  , catid = column_ifexists(\"catid\", \"\") // Application Category ID\n  , sid = column_ifexists(\"sid\", \"\") // Application Signature ID\n  , appid = column_ifexists(\"appid\", \"\") // Application ID from App Control\n  , sosIPSFullString = column_ifexists(\"ipscat\", \"\")\n  , ipscat = extract(@'^\"?([a-zA-Z-\\/]+)', 1, column_ifexists(\"ipscat\", \"\")) // IPS Category/Signature\n  , sosIPSSignatureName = extract(@'[ ](.*)\\S', 1, column_ifexists(\"ipscat\", \"\")) // IPS Signature name\n  , spycat = column_ifexists(\"spycat\", \"\") // // Anti-Spyware Category.\n  , FileSize = tolong(column_ifexists(\"FileSize\", long(null)))\n  , FileName = column_ifexists(\"FileName\", \"\")\n  , sosAppControlFileName = extract(@'.*Filename: (.*)\\\"', 1, column_ifexists(\"Message\", \"\")) // App Control Filename Logging\n  , sosHttpReferrer = extract(@'Referer: (.*)\\\"$', 1, column_ifexists(\"sosLogMsgNote\", \"\"))\n  , sosHttpRequestMethod_ = extract(@'Command: (.\\w+)', 1, column_ifexists(\"sosLogMsgNote\", \"\"))\n  , sosCaptureATPVerdict = extract(@'Gateway Anti-Virus Status: (.*)\\. ', 1, column_ifexists(\"Message\", \"\"))\n  , sosCountry = extract(@'Country Name:(.*)\\\"$', 1, column_ifexists(\"Message\", \"\"))\n  , arg = column_ifexists(\"arg\", \"\") // URL. Represents the URL path name.\n  , fileid = column_ifexists(\"fileid\", \"\") // File hash or URL.\n  , uuid = column_ifexists(\"uuid\", \"\") // UUID\n  , dpi = column_ifexists(\"dpi\", \"\") // Indicates a flow was inspected by DPI. Applies only to Connection Closed messages.\n  , dpt = column_ifexists(\"dpt\", \"\") // Destination port\n  , dnpt = column_ifexists(\"dnpt\", \"\") // NAT'ed destination port\n  , spt = column_ifexists(\"spt\", \"\") // Source port\n  , snpt = column_ifexists(\"snpt\", \"\") // NAT'ed source port\n  , bid = column_ifexists(\"bid\", \"\") // Blade ID\n  , SrcZone = sosSourceZone\n  , DstZone = sosDestinationZone\n  , EventOriginalSeverity = LogSeverity\n  , Dst = DstIpAddr\n  , Src = SrcIpAddr\n  , IpAddr = SrcIpAddr\n  , sosCFSCategoryID = extract(@'(\\d+)\\s', 1, column_ifexists(\"sosCFSFullString\", \"\")) // Application Name from App Control\n  , sosCFSCategoryName = extract(@'.*-(\"(.*))', 1, column_ifexists(\"sosCFSFullString\", \"\")) // Application Name from App Control\n  , sosCFSPolicyName = extract(@'Policy: (.*), Info:', 1, column_ifexists(\"sosLogMsgNote\", \"\"))\n  , auditId = column_ifexists(\"auditId\", \"\") // Audit ID of the Configuration Auditing event.\n  , tranxId = column_ifexists(\"tranxId\", \"\") // Transaction ID of the entries pertaining to the same transaction or batch.\n  , userMode = column_ifexists(\"userMode\", \"\") // User Mode. Displays the privileges assigned to a user.\n  , grpName = column_ifexists(\"grpName\", \"\") // Labels a group of data usually associated with a table (ex: VPN Policy list, Syslog Server list, etc.)\n  , grpIndex = column_ifexists(\"grpIndex\", \"\") // Labels the instance of the data group (ex: a VPN policy name, Syslog server entry in the list, etc.)\n  , oldValue = column_ifexists(\"oldValue\", \"\") // The previous value associated with the auditing event.\n  , newValue = column_ifexists(\"newValue\", \"\") // The new value associated with the auditing event.\n  , auditTime = column_ifexists(\"auditTime\", \"\") // The timestamp indicates the time configuration was changed.\n  , auditPath = column_ifexists(\"auditPath\", \"\") // The logical location of the configuration setting.\n  , EventStartTime = TimeGenerated\n  , EventEndTime = TimeGenerated\n  , EventType = \"NetworkSession\"\n  , EventSchemaVersion = \"0.2.6\"\n  , EventSchema = \"NetworkSession\"\n  , EventCount = toint(1)\n  , EventUid = _ItemId\n  , EventResultDetails = \"NA\"\n  , ThreatConfidence = toint(column_ifexists(\"ThreatConfidence\", int(null)))\n| extend\n    HttpRequestMethod = coalesce(HttpRequestMethod, sosHttpRequestMethod_)\n    , SrcUsername = coalesce(susr, SrcUsername)\n    , FileName = coalesce(FileName, sosAppControlFileName)\n    , NetworkDirection = case(SrcZone == \"\" and DstZone == \"\", \"NA\"\n                              , SrcZone == \"WAN\" and (DstZone == \"WAN\" and DstIpAddr !has \".255\"), \"Inbound\"\n                              , SrcZone == \"WAN\" and DstZone == \"WAN\", \"External\"\n                              , SrcZone == \"WAN\" and DstZone != \"WAN\", \"Inbound\"\n                              , SrcZone == \"VPN\" and DstZone == \"WAN\", \"Outbound\"\n                              , SrcZone == \"VPN\" and DstZone != \"WAN\", \"Inbound\"\n                              , DstZone == \"MULTICAST\", \"NA\"\n                              , DstZone == \"WAN\", \"Outbound\"\n                              , \"Local\"\n                              )\n| extend\n    SrcUsernameType = case(SrcUsername has \"=\", \"DN\",\n                                  SrcUsername has \"\\\\\", \"Windows\",\n                                  SrcUsername has \"@\", \"UPN\",\n                                  SrcUsername == \"Unknown (external IP)\", \"\",\n                                  SrcUsername == \"Unknown (SSO bypassed)\", \"\",\n                                  isnotempty(SrcUsername), \"Simple\",\n                                  \"\"\n                                  )\n    , ThreatField = case(isnotempty(ThreatOriginalConfidence) and NetworkDirection == \"Outbound\", \"SrcIpAddr\"\n          , isnotempty(ThreatOriginalConfidence) and NetworkDirection == \"Inbound\", \"DstIpAddr\"\n          , \"\")\n| extend\n      ThreatIpAddr = case(ThreatField == \"SrcIpAddr\", SrcIpAddr\n                          , ThreatField == \"DstIpAddr\", DstIpAddr\n                          , \"\")\n| project-rename\n    sosReceivedPackets_Field = FieldDeviceCustomNumber1Label // FieldDeviceCustomNumberXLabel (cnXLabel=)\n  , sosReceivedPackets = DeviceCustomNumber1Label // DeviceCustomNumberXLabel (cnXLabel=)\n  , sosSentPackets_Field = FieldDeviceCustomNumber2Label // FieldDeviceCustomNumberXLabel (cnXLabel=)\n  , sosSentPackets = DeviceCustomNumber2Label // DeviceCustomNumberXLabel (cnXLabel=)\n  , sosConnectionDuration = DeviceCustomNumber3Label\n  , sosUser = susr // Logged-in username associated with the log event.\n  , sosAppRulePolicyId = af_polid // App Rule Policy ID.\n  , sosAppRulePolicyName = af_policy // App Rule Policy Name.\n  , sosAppRuleService = af_service // App Rule Service Name.\n  , sosAppRuleType = af_type // App Rule Policy Type.\n  , sosAppRuleObject = af_object // App Rule Object Name.\n  , sosAppRuleObjectContent = contentObject // App Rule Object Content.\n  , sosAppRuleAction = af_action // App Rule Action.\n  , sosSourceIPv6Address = srcV6 // Source IPv6 IP\n  , sosDestinationIPv6Address = dstV6 // Destination IPv6 IP\n  , sosServiceName = appName // Non-signature Application name that matches the Application ID \"app\" or \"f\".\n  , sosAppFullString = appcat // The full \"<CATEGORY> <APPNAME> -- <SIGNAME>\" string.\n  , sosAppIDNumber = app // Numeric Application ID. Not the same as \"ApplicationProtocol\".\n  , sosAppID = appid // Application ID from App Control\n  , sosAppCategoryID = catid // Application Category ID\n  , sosAppSignatureID = sid // Application Signature ID\n  , sosIPSCategoryName = ipscat // IPS Category Name\n  , sosAntiSpywareCategory = spycat // Anti-Spyware Category\n  , sosURLPathName = arg // URL. Represents the URL path name.\n  , sosFileIdentifier = fileid // File hash or URL\n  , sosDPIInspectedFlow = dpi // Indicates a flow was inspected by DPI. Applies only to Connection Closed messages.\n  , sosDestinationPortDPT = dpt // Destination port\n  , sosNATDestinationPort = dnpt // NAT'ed destination port\n  , sosSourcePortSPT = spt // Source port\n  , sosNATSourcePort = snpt // NAT'ed source port\n  , sosBladeID = bid // Blade ID\n  , sosAuditID = auditId // Audit ID of the Configuration Auditing event.\n  , sosAuditTransactionID = tranxId // Transaction ID of the entries pertaining to the same transaction or batch.\n  , sosAuditUserPrivileges = userMode // User Mode. Displays the privileges assigned to a user.\n  , sosAuditGroupName = grpName // Labels a group of data usually associated with a table (ex: VPN Policy list, Syslog Server list, etc.)\n  , sosAuditGroupIndex = grpIndex // Labels the instance of the data group (ex: a VPN policy name, Syslog server entry in the list, etc.)\n  , sosAuditOldValue = oldValue // The previous value associated with the auditing event.\n  , sosAuditNewValue = newValue // The new value associated with the auditing event.\n  , sosAuditTime = auditTime // The timestamp indicates the time configuration was changed.\n  , sosAuditPath = auditPath // The logical location of the configuration setting.\n  , sosUUID = uuid\n  , sosHttpRequestMethod = HttpRequestMethod\n  , sosFileName = FileName\n  , DvcOriginalAction = fw_action\n| extend AdditionalFields = bag_pack(\n    \"ReceivedPackets_Field\", sosReceivedPackets_Field\n  , \"ReceivedPackets\", sosReceivedPackets\n  , \"SentPackets_Field\", sosSentPackets_Field\n  , \"SentPackets\", sosSentPackets\n  , \"ConnectionDuration\", sosConnectionDuration\n  , \"User\", sosUser\n  , \"AppRulePolicyId\", sosAppRulePolicyId\n  , \"AppRulePolicyName\", sosAppRulePolicyName\n  , \"AppRuleService\", sosAppRuleService\n  , \"AppRuleType\", sosAppRuleType\n  , \"AppRuleObject\", sosAppRuleObject\n  , \"AppRuleObjectContent\", sosAppRuleObjectContent\n  , \"AppRuleAction\", sosAppRuleAction\n  , \"SourceIPv6Address\", sosSourceIPv6Address\n  , \"DestinationIPv6Address\", sosDestinationIPv6Address\n  , \"ServiceName\", sosServiceName\n  , \"AppFullString\", sosAppFullString\n  , \"AppIDNumber\", sosAppIDNumber\n  , \"AppID\", sosAppID\n  , \"AppCategoryID\", sosAppCategoryID\n  , \"AppSignatureID\", sosAppSignatureID\n  , \"IPSCategoryName\", sosIPSCategoryName\n  , \"AntiSpywareCategory\", sosAntiSpywareCategory\n  , \"URLPathName\", sosURLPathName\n  , \"FileIdentifier\", sosFileIdentifier\n  , \"DPIInspectedFlow\", sosDPIInspectedFlow\n  , \"DestinationPortDPT\", sosDestinationPortDPT\n  , \"NATDestinationPort\", sosNATDestinationPort\n  , \"SourcePortSPT\", sosSourcePortSPT\n  , \"NATSourcePort\", sosNATSourcePort\n  , \"BladeID\", sosBladeID\n  , \"AuditID\", sosAuditID\n  , \"AuditTransactionID\", sosAuditTransactionID\n  , \"AuditUserPrivileges\", sosAuditUserPrivileges\n  , \"AuditGroupName\", sosAuditGroupName\n  , \"AuditGroupIndex\", sosAuditGroupIndex\n  , \"AuditOldValue\", sosAuditOldValue\n  , \"AuditNewValue\", sosAuditNewValue\n  , \"AuditTime\", sosAuditTime\n  , \"AuditPath\", sosAuditPath\n  , \"UUID\", sosUUID\n  , \"HttpRequestMethod\", sosHttpRequestMethod\n  , \"FileName\", sosFileName\n  , \"FileSize\", FileSize\n  , \"HttpReferrer\", sosHttpReferrer\n  , \"HttpUserAgent\", HttpUserAgent\n  , \"CaptureATPVerdict\", sosCaptureATPVerdict\n  , \"Country\", sosCountry\n  , \"FirewallAction\", sosFirewallAction\n  , \"ApplicationID\", sosApplicationID\n  , \"SourceZone\", sosSourceZone\n  , \"DestinationZone\", sosDestinationZone\n  , \"CFSCategoryID\", sosCFSCategoryID\n  , \"CFSCategoryName\", sosCFSCategoryName\n  , \"CFSPolicyName\", sosCFSPolicyName\n  , \"AppControlFileName\", sosAppControlFileName\n  , \"AppCategoryName\", sosAppCategoryName\n  , \"AppIDName\", sosAppIDName\n  , \"AppSignatureName\", sosAppSignatureName\n  , \"IPSFullString\", sosIPSFullString\n  , \"IPSSignatureName\", sosIPSSignatureName\n  , \"LegacyMessageCategory\", sosLegacyMessageCategory\n  , \"LogMsgCategory\", sosLogMsgCategory\n  , \"LogMsgNote\", sosLogMsgNote\n  , \"LogMsgSeverity\", sosLogMsgSeverity\n  , \"NATSourceIPAddress\", sosNATSourceIPAddress\n  , \"NATDestinationIPAddress\", sosNATDestinationIPAddress\n  , \"SourceZoneType\", sosSourceZone\n  , \"DestinationZoneType\", sosDestinationZone\n  , \"SourceVPNPolicyName\", sosSourceVPNPolicyName\n  , \"DestinationVPNPolicyName\", sosDestinationVPNPolicyName\n  , \"InterfaceStatistics\", sosInterfaceStatistics\n  , \"SoleraNPCSURL\", sosSoleraNPCSURL\n  , \"SerialNumber\", sosSerialNumber\n  , \"DeviceModel\", sosDeviceModel\n  , \"LogMsgID\", sosLogMsgID\n  , \"RequestURL\", RequestURL\n  , \"Activity\", EventMessage\n  , \"EventMessageDetail\", sosEventMessageDetail\n  , \"AdditionalExtensions\", AdditionalExtensions\n  , \"UserSessionType\", sosUserSessionType\n  , \"UserSessionDuration\", sosUserSessionDuration\n  )\n| project-away\n    DeviceEventCategory\n  , gcat\n  , RequestMethod\n  , ipspri\n  , spypri\n  , sos*\n  , RequestURL\n  , Protocol\n  , AdditionalExtensions\n  , Flex*\n  , Indicator*\n  , Malicious*\n  , Field*\n  , DeviceCustom*\n  , Old*\n  , File*\n  , Source*\n  , Destination*\n  , Device*\n  , SimplifiedDeviceAction\n  , ExternalID\n  , ExtID\n  , TenantId\n  , ProcessName\n  , ProcessID\n  , ExtID\n  , HttpUserAgent\n  , OriginalLogSeverity\n  , LogSeverity\n  , EventOutcome\n  , StartTime\n  , EndTime\n  , ReceiptTime\n  , Remote*\n  , Threat*\n  , RequestContext\n  , RequestCookies\n  , CollectorHostName\n  , CommunicationDirection\n  , ReportReferenceLink\n  , ReceivedBytes\n  , SentBytes\n  , _ResourceId\n  , _ItemId\n| project-reorder\n    TimeGenerated\n  , EventVendor\n  , EventProduct\n  , DvcDescription\n  , Dvc\n  , DvcOs\n  , DvcOsVersion\n};\nParser (disabled=disabled)\n",
            "version": 1,
            "functionParameters": "disabled:bool=False"
          }
        }
      ]
    }
  ]
}