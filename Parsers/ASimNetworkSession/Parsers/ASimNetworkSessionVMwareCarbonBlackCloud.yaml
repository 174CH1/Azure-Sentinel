Parser:
  Title: NetworkSession ASIM Parser for VMware Carbon Black Cloud
  Version: '0.1.1'
  LastUpdated: Aug 09, 2023
Product:
  Name: VMware Carbon Black Cloud
Normalization:
  Schema: NetworkSession
  Version: '0.2.6'
References:
- Title: ASIM NetworkSession Schema
  Link: https://aka.ms/ASimNetworkSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
- Title: VMware Carbon Black Cloud documentation 
  Link: https://developer.carbonblack.com/reference/carbon-black-cloud/
        https://developer.carbonblack.com/reference/cb-threathunter/latest/event-search-fields/
Description: |
  This ASIM parser supports normalizing VMware Carbon Black Cloud logs to the ASIM Registry Event normalized schema. VMware Carbon Black Cloud events are captured through VMware Carbon Black Cloud data connector which ingests Carbon Black Audit, Notification and Event data into Microsoft Sentinel through the REST API.
ParserName: ASimNetworkSessionVMwareCarbonBlackCloud
EquivalentBuiltInParser: _Im_NetworkSession_VMwareCarbonBlackCloud
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let NetworkProtocolLookup = datatable (netconn_protocol_s: string, NetworkProtocol: string)
      [
      "PROTO_TCP", "TCP",
      "PROTO_UDP", "UDP"
  ];
  let DvcActionLookup = datatable (sensor_action_s: string, DvcAction: string)
      [
      "ACTION_ALLOW", "Allow",
      "ACTION_SUSPEND", "Drop",
      "ACTION_TERMINATE", "Drop",
      "ACTION_BREAK", "Drop",
      "ACTION_BLOCK", "Deny"
  ];
  let parser=(disabled: bool=false) {
      CarbonBlackEvents_CL
      | where not(disabled)
          and eventType_s == "endpoint.event.netconn"
      | lookup NetworkProtocolLookup on netconn_protocol_s
      | lookup DvcActionLookup on sensor_action_s
      | extend temp_action = tostring(split(action_s, "|")[0])
      | extend
          EventStartTime = todatetime(split(createTime_s, '+')[0]),
          SrcDomain = case(
                  netconn_domain_s == remote_ip_s or netconn_domain_s has ":" or netconn_domain_s !has ".",
                  "",
                  netconn_inbound_b,
                  netconn_domain_s,
                  ""
              ),
          AdditionalFields = bag_pack(
                        "Organization Key",
                        org_key_s,
                        "Process Guid",
                        process_guid_s
                    ),
          DstPortNumber = toint(remote_port_d),
          NetworkDirection = case(
                        temp_action == "ACTION_CONNECTION_LISTEN",
                        "Listen",
                        netconn_inbound_b == true,
                        "Inbound",
                        "Unknown"
                    ),
          SrcPortNumber = toint(local_port_d),
          SrcProcessId = tostring(toint(process_pid_d))
      | project-rename
          DstIpAddr = remote_ip_s,
          DvcHostname = device_name_s,
          DvcIpAddr = device_external_ip_s,
          EventUid = _ResourceId,
          SrcIpAddr = local_ip_s,
          DvcId = device_id_s,
          DvcOriginalAction = sensor_action_s,
          DvcOs = device_os_s,
          EventMessage = event_description_s,
          EventOriginalType = action_s,
          EventOriginalUid = event_id_g,
          EventOwner = event_origin_s,
          SrcProcessName = process_path_s,
          SrcUsername = process_username_s
      | extend
          Dvc = coalesce(DvcId, DvcHostname, DvcIpAddr),
          EventEndTime = EventStartTime,
          EventResult = case(
                    temp_action == "ACTION_CONNECTION_CREATE_FAILED",
                    "Failure",
                    DvcOriginalAction == "ACTION_ALLOW" or isempty(DvcOriginalAction),
                    "Success",
                    "Failure"
                ),
          Dst = DstIpAddr,
          Src = SrcIpAddr,
          NetworkProtocolVersion = case(
                              DstIpAddr contains ".",
                              "IPv4",       
                              DstIpAddr contains ":",
                              "IPv6", 
                              ""
                          ),
          IpAddr = SrcIpAddr,
          SrcUsernameType = _ASIM_GetUsernameType(SrcUsername),
          SrcDomainType = iff(isnotempty(SrcDomain), "FQDN", ""),
          DvcIdType = iff(isnotempty(DvcId), "Other", "")
      | extend
          EventCount = int(1),
          EventProduct = "Carbon Black Cloud",
          EventSchema = "NetworkSession",
          EventSchemaVersion = "0.2.6",
          EventType = "EndpointNetworkSession",
          EventVendor = "VMware"
      | project-away
          *_d,
          *_s,
          *_g,
          *_b,
          temp_action,
          Computer,
          MG,
          ManagementGroupName,
          RawData,
          SourceSystem,
          TenantId
  };
  parser(disabled = disabled)