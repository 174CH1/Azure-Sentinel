Parser:
  Title: Network Session ASIM parser for Cisco Firepower
  Version: '1.0'
  LastUpdated: Jun 28, 2023
Product:
  Name: Cisco Firepower
Normalization:
  Schema: NetworkSession
  Version: '0.2.6'
References:
  - Title: ASIM Network Session Schema
    Link: https://aka.ms/ASimNetworkSessionDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
  - Title: Cisco Firepower Documentation
    Link: https://www.cisco.com/c/en/us/td/docs/security/firepower/620/api/eStreamer/EventStreamerIntegrationGuide/Intro.html
Description: |
  This ASIM parser supports normalizing commonly used Cisco Firepower messages collected using the CEF Data Connector to the ASIM Network Session normalized schema.
ParserName: ASimNetworkSessionCiscoFirepower
EquivalentBuiltInParser: _ASim_NetworkSession_CiscoFirepower
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let ProtocolLookup = datatable(Protocol:string, NetworkProtocol:string)
  [
    "0","HOPOPT",
    "1","ICMP",
    "2","IGMP",
    "3","GGP",
    "4","IPv4",
    "5","ST",
    "6","TCP",
    "7","CBT",
    "8","EGP",
    "9","IGP",
    "10","BBN-RCC-MON",
    "11","NVP-II",
    "12","PUP",
    "13","ARGUS (deprecated)",
    "14","EMCON",
    "15","XNET",
    "16","CHAOS",
    "17","UDP",
    "18","MUX",
    "19","DCN-MEAS",
    "20","HMP",
    "21","PRM",
    "22","XNS-IDP",
    "23","TRUNK-1",
    "24","TRUNK-2",
    "25","LEAF-1",
    "26","LEAF-2",
    "27","RDP",
    "28","IRTP",
    "29","ISO-TP4",
    "30","NETBLT",
    "31","MFE-NSP",
    "32","MERIT-INP",
    "33","DCCP",
    "34","3PC",
    "35","IDPR",
    "36","XTP",
    "37","DDP",
    "38","IDPR-CMTP",
    "39","TP++",
    "40","IL",
    "41","IPv6",
    "42","SDRP",
    "43","IPv6-Route",
    "44","IPv6-Frag",
    "45","IDRP",
    "46","RSVP",
    "47","GRE",
    "48","DSR",
    "49","BNA",
    "50","ESP",
    "51","AH",
    "52","I-NLSP",
    "53","SWIPE (deprecated)",
    "54","NARP",
    "55","MOBILE",
    "56","TLSP",
    "57","SKIP",
    "58","IPv6-ICMP",
    "59","IPv6-NoNxt",
    "60","IPv6-Opts",
    "61","",
    "62","CFTP",
    "63","",
    "64","SAT-EXPAK",
    "65","KRYPTOLAN",
    "66","RVD",
    "67","IPPC",
    "68","",
    "69","SAT-MON",
    "70","VISA",
    "71","IPCV",
    "72","CPNX",
    "73","CPHB",
    "74","WSN",
    "75","PVP",
    "76","BR-SAT-MON",
    "77","SUN-ND",
    "78","WB-MON",
    "79","WB-EXPAK",
    "80","ISO-IP",
    "81","VMTP",
    "82","SECURE-VMTP",
    "83","VINES",
    "84","TTP",
    "84","IPTM",
    "85","NSFNET-IGP",
    "86","DGP",
    "87","TCF",
    "88","EIGRP",
    "89","OSPFIGP",
    "90","Sprite-RPC",
    "91","LARP",
    "92","MTP",
    "93","AX.25",
    "94","IPIP",
    "95","MICP (deprecated)",
    "96","SCC-SP",
    "97","ETHERIP",
    "98","ENCAP",
    "99","",
    "100","GMTP",
    "101","IFMP",
    "102","PNNI",
    "103","PIM",
    "104","ARIS",
    "105","SCPS",
    "106","QNX",
    "107","A/N",
    "108","IPComp",
    "109","SNP",
    "110","Compaq-Peer",
    "111","IPX-in-IP",
    "112","VRRP",
    "113","PGM",
    "114","",
    "115","L2TP",
    "116","DDX",
    "117","IATP",
    "118","STP",
    "119","SRP",
    "120","UTI",
    "121","SMP",
    "122","SM (deprecated)",
    "123","PTP",
    "124","ISIS over IPv4",
    "125","FIRE",
    "126","CRTP",
    "127","CRUDP",
    "128","SSCOPMCE",
    "129","IPLT",
    "130","SPS",
    "131","PIPE",
    "132","SCTP",
    "133","FC",
    "134","RSVP-E2E-IGNORE",
    "135","Mobility Header",
    "136","UDPLite",
    "137","MPLS-in-IP",
    "138","manet",
    "139","HIP",
    "140","Shim6",
    "141","WESP",
    "142","ROHC",
    "143","Ethernet",
    "253","",
    "254","",
    "255","Reserved"
  ];
  let ActionLookup_Intrusion = datatable(DeviceAction:string, DvcAction:string, EventResult:string, EventSeverity:string)
  [
      "Blocked","Deny","Failure","Low",
      "Alerted","Allow","Success","Informational",
      "Rewritten","Allow","Success","Informational",
      "Would be Rewritten","Allow","Partial","Informational",
      "Would be Blocked","Deny","Partial","Low",
      "Would Be Blocked","Deny","Partial","Low",
      "Dropped","Drop","Failure","Low",
      "Would be Dropped","Drop","Partial","Low",
      "Partially Dropped","Drop","Partial","Low",
      "Would be Block","Deny","Partial","Low",
      "Partial Blocked","Deny","Partial","Low",
      "Rejected","Deny","Failure","Low",
      "Would be Rejected","Deny","Partial","Low",
      "Would Rejected","Deny","Partial","Low"
  ];
  let ActionLookup_ConnectionStatistics = datatable (DeviceAction:string, DvcAction:string, EventResult:string, EventSeverity:string)
  [
      "Block","Deny","Failure","Low",
      "Allow","Allow","Success","Informational",
      "Monitor","Allow","Success","Informational"
  ];
  let ActionLookup_PolicyViolation = datatable(DeviceAction:string, DvcOriginalAction:string, DvcAction:string, EventResult:string, EventSeverity:string)
  [
      "0","Intrusion event not dropped","Allow","Failure","Low",
      "1","Intrusion event was dropped","Drop","Success","Low",
      "2","The packet that triggered the event would have been dropped","Drop","Partial","Low"
  ];
  let EventResultDetailsLookup = datatable(Reason:string, EventResultDetails:string)
  [
      "N/A" ,"NA",
      "IP Block" ,"Failover",
      "IP Monitor" ,"Unknown",
      "User Bypass" ,"Unknown",
      "File Monitor" ,"Unknown",
      "File Block" ,"Failover",
      "Intrusion Monitor" ,"Unknown",
      "Intrusion Block" ,"Unknown",
      "File Resume Block" ,"Failover",
      "File Resume Allow" ,"Unknown",
      "File Custom Detection" ,"Unknown"
  ];
  let parser = (disabled:bool=false){
  let alllogs = CommonSecurityLog
              | where not(disabled) and DeviceVendor == "Cisco" and DeviceProduct == "Firepower"
              | where DeviceEventClassID has_any("INTRUSION:400", "PV:112", "RNA:1003:1")
              | lookup ProtocolLookup on Protocol;
  let Connection_statistics_events = alllogs
              | where DeviceEventClassID has "RNA:1003:1"
              | parse-kv AdditionalExtensions as (
                      start:long ,
                      end:long ,
                      bytesIn:long ,
                      bytesOut:long ,
                  ) with (pair_delimiter=';', kv_delimiter='=') 
              | lookup ActionLookup_ConnectionStatistics on DeviceAction
              | lookup EventResultDetailsLookup on Reason
              | extend SrcBytes = bytesIn,
                      DstBytes = bytesOut,
                      EventOriginalResultDetails = Reason,
                      DvcOriginalAction = DeviceAction,
                      AdditionalFields = bag_pack("policy", DeviceCustomString1,
                                                  "ingressZone", DeviceCustomString3,
                                                  "egressZone", DeviceCustomString4,
                                                  "instanceID", ProcessID,
                                                  "clientApplicationID", RequestClientApplication,
                                                  "clientUrl", RequestURL);
  let Intrusion_events = alllogs
              | where DeviceEventClassID has "INTRUSION:400"
              | parse-kv AdditionalExtensions as (
                      start:long
                  ) with (pair_delimiter=';', kv_delimiter='=')
              | lookup ActionLookup_Intrusion on DeviceAction
              | extend 
                EventMessage = Activity,
                ThreatCategory = DeviceEventCategory,
                DvcOriginalAction = DeviceAction,
                AdditionalFields = bag_pack("policy", DeviceCustomString1,
                                                  "ingressZone", DeviceCustomString3,
                                                  "egressZone", DeviceCustomString4,
                                                  "ipspolicy", DeviceCustomString5,
                                                  "clientApplicationID", RequestClientApplication,
                                                  "clientUrl", RequestURL);
  let Policy_Violation_events = alllogs
              | where DeviceEventClassID has "PV:112"
              | lookup ActionLookup_PolicyViolation on DeviceAction
              | extend  EventMessage = Message,
                      AdditionalFields = bag_pack("policy", DeviceCustomString1,
                                                  "ingressZone", DeviceCustomString3,
                                                  "egressZone", DeviceCustomString4)
              | project-rename DstUsername = DestinationUserName
              | extend DstUsernameType = "Simple";
  let AllEvents = union isfuzzy=false Connection_statistics_events,Intrusion_events,Policy_Violation_events
              | extend SrcPortNumber = SourcePort,
                      DstPortNumber = DestinationPort;
  let Intrusion_events_ICMP = Intrusion_events
              | where NetworkProtocol == "ICMP"
              | extend NetworkIcmpCode = DestinationPort,
                      NetworkIcmpType = tostring(SourcePort),
                      SrcPortNumber = int(null),
                      DstPortNumber = int(null);
  union isfuzzy=false AllEvents, Intrusion_events_ICMP
  | extend 
      EventSchema = "NetworkSession",
      EventSchemaVersion = "0.2.6",
      EventType = "NetworkSession",
      EventCount = int(1),
      EventUid = _ResourceId,
      EventStartTime = coalesce(unixtime_milliseconds_todatetime(start),unixtime_milliseconds_todatetime(tolong(ReceiptTime))),
      SrcIpAddr = coalesce(SourceIP,DeviceCustomIPv6Address2),
      DstIpAddr = coalesce(DestinationIP,DeviceCustomIPv6Address3),
      EventOriginalType = iff(DeviceEventClassID  has "INTRUSION:400" ,"INTRUSION EVENT",Activity),
      SrcVlanId = tostring(DeviceCustomNumber1),
      DstDomain = DestinationDnsDomain,
      ThreatOriginalConfidence = ThreatConfidence,
      SrcUsernameType = "Simple",
      DvcIdType = "Other"
  | extend EventEndTime = coalesce(unixtime_milliseconds_todatetime(end),EventStartTime),
          NetworkProtocolVersion = case(DstIpAddr contains ".", "IPv4"
          , DstIpAddr contains ":", "IPv6"
          , ""),
      DstDomainType = iff(isnotempty(DstDomain), "FQDN", "")
  | invoke _ASIM_ResolveDvcFQDN('Computer')
  | project-rename 
      EventProduct = DeviceProduct,
      EventVendor = DeviceVendor,
      SrcUsername = SourceUserName,
      DvcInboundInterface = DeviceInboundInterface,
      DvcOutboundInterface = DeviceOutboundInterface,
      EventOriginalSeverity = LogSeverity,
      DvcId = DeviceExternalID,
      NetworkApplicationProtocol = ApplicationProtocol,
      EventProductVersion = DeviceVersion,
      EventOriginalUid = ExtID,
      NetworkRuleName = DeviceCustomString2
  | extend 
      IpAddr = SrcIpAddr,
      InnerVlanId = SrcVlanId,
      Src = SrcIpAddr,
      Dst = DstIpAddr,
      Dvc = DeviceName,
      Rule = NetworkRuleName,
      User = SrcUsername
  | project-away bytesIn,bytesOut,start,end,ThreatConfidence,CommunicationDirection,AdditionalExtensions,Device*,Source*,Destination*,Activity,ProcessID,Protocol,Reason,ReceiptTime,SimplifiedDeviceAction,OriginalLogSeverity,ProcessName,EndTime,ExternalID,File*,ReceivedBytes,Message,Old*,EventOutcome,Request*,StartTime,Field*,Flex*,Remote*,Malicious*,ThreatSeverity,IndicatorThreatType,ThreatDescription,_ResourceId,SentBytes,ReportReferenceLink,Computer, TenantId
  };
  parser(disabled=disabled)