  
Parser:
  Title: ASIM Source Agnostic File Events Parser
  Version: '0.1.2'
  LastUpdated: October 26, 2022
Product:
  Name: Source Agnostic
Normalization:
  Schema: FileEvent
  Version: '0.1.0'
References:
- Title: ASIM File Event Schema
  Link: https://aka.ms/ASimFileEventDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing File activity logs from all supported sources to the ASIM File Event normalized schema.
ParserName: imFileEvent
EquivalentBuiltInParser: _Im_FileEvent 
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: actorusername_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetfilepath_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: srcfilepath_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: hashes_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvchostname_has_any
    Type: dynamic
    Default: dynamic([])
Parsers:
  - _Im_FileEvent_Empty
  - _Im_FileEvent_LinuxSysmonFileCreated
  - _Im_FileEvent_LinuxSysmonFileDeleted
  - _Im_FileEvent_AzureBlobStorage
  - _Im_FileEvent_M365D
  - _Im_FileEvent_AzureFileStorage
  - _Im_FileEvent_AzureQueueStorage
  - _Im_FileEvent_MicrosoftSharePoint
  - _Im_FileEvent_MicrosoftSysmon
  - _Im_FileEvent_AzureTableStorage
  - _Im_FileEvent_MicrosoftWindowsEvent
  - _Im_FileEvent_Native
  - _Im_FileEvent_SentinelOne
  - _Im_FileEvent_VMwareCarbonBlackCloud
ParserQuery: |
  let DisabledParsers=materialize(_GetWatchlist('ASimDisabledParsers') | where SearchKey in ('Any', 'ExcludevimFileEvent') | extend SourceSpecificParser=column_ifexists('SourceSpecificParser','') | distinct SourceSpecificParser | where isnotempty(SourceSpecificParser));
  let imFileEventDisabled=toscalar('ExcludeimFileEvent' in (DisabledParsers) or 'Any' in (DisabledParsers)); 
  let FileEventGeneric=(
    starttime: datetime=datetime(null),
    endtime: datetime=datetime(null),
    eventtype_in: dynamic=dynamic([]),
    srcipaddr_has_any_prefix: dynamic=dynamic([]),
    actorusername_has_any: dynamic=dynamic([]),
    targetfilepath_has_any: dynamic=dynamic([]),
    srcfilepath_has_any: dynamic=dynamic([]),
    hashes_has_any: dynamic=dynamic([]),
    dvchostname_has_any: dynamic=dynamic([]))
  {
  union isfuzzy=true
    vimFileEventEmpty,
    vimFileEventLinuxSysmonFileCreated,
    vimFileEventLinuxSysmonFileDeleted,
    vimFileEventAzureBlobStorage,
    vimFileEventM365D,
    vimFileEventAzureFileStorage,
    vimFileEventAzureQueueStorage,
    vimFileEventMicrosoftSharePoint,
    vimFileEventMicrosoftSysmon,
    vimFileEventAzureTableStorage,
    vimFileEventMicrosoftWindowsEvents,
    vimFileEventNative,
    vimFileEventSentinelOne (disabled=imFileEventDisabled or ('ExcludevimFileEventSentinelOne'      in (DisabledParsers) )),
    vimFileEventVMwareCarbonBlackCloud (starttime, endtime, eventtype_in, srcipaddr_has_any_prefix, actorusername_has_any, targetfilepath_has_any, srcfilepath_has_any, hashes_has_any, dvchostname_has_any, imFileEventDisabled or ('ExcludevimFileEventVMwareCarbonBlackCloud'      in (DisabledParsers) ))
  };
  FileEventGeneric(starttime=starttime, endtime=endtime, eventtype_in=eventtype_in, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, actorusername_has_any=actorusername_has_any, targetfilepath_has_any=targetfilepath_has_any, srcfilepath_has_any=srcfilepath_has_any, hashes_has_any=hashes_has_any, dvchostname_has_any=dvchostname_has_any)